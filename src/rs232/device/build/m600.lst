gplink-0.13.6 alpha
Copyright (c) 1998-2005 gputils project
Listing File Generated: 11-21-2009  16:31:00
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.8.5 #5516 (Sep 20 2009) (UNIX)
                                           ; This file was generated Sat Nov 21 16:29:05 2009
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4550
                                           	__config 0x300000, 0x10
                                           	__config 0x300001, 0x0a
                                           	__config 0x300002, 0x00
                                           	__config 0x300003, 0x00
                                           	__config 0x300005, 0x01
                                           	__config 0x300006, 0x80
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _main
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _SPPDATAbits
                                           	extern _SPPCFGbits
                                           	extern _SPPEPSbits
                                           	extern _SPPCONbits
                                           	extern _UFRMLbits
                                           	extern _UFRMHbits
                                           	extern _UIRbits
                                           	extern _UIEbits
                                           	extern _UEIRbits
                                           	extern _UEIEbits
                                           	extern _USTATbits
                                           	extern _UCONbits
                                           	extern _UADDRbits
                                           	extern _UCFGbits
                                           	extern _UEP0bits
                                           	extern _UEP1bits
                                           	extern _UEP2bits
                                           	extern _UEP3bits
                                           	extern _UEP4bits
                                           	extern _UEP5bits
                                           	extern _UEP6bits
                                           	extern _UEP7bits
                                           	extern _UEP8bits
                                           	extern _UEP9bits
                                           	extern _UEP10bits
                                           	extern _UEP11bits
                                           	extern _UEP12bits
                                           	extern _UEP13bits
                                           	extern _UEP14bits
                                           	extern _UEP15bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _TRISCbits
                                           	extern _TRISDbits
                                           	extern _TRISEbits
                                           	extern _OSCTUNEbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCONbits
                                           	extern _CCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSPCON2bits
                                           	extern _SSPCON1bits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _HLVDCONbits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _FSR2Hbits
                                           	extern _BSRbits
                                           	extern _FSR1Hbits
                                           	extern _FSR0Hbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _TBLPTRUbits
                                           	extern _PCLATHbits
                                           	extern _PCLATUbits
                                           	extern _STKPTRbits
                                           	extern _TOSUbits
                                           	extern _int_counter
                                           	extern _SPPDATA
                                           	extern _SPPCFG
                                           	extern _SPPEPS
                                           	extern _SPPCON
                                           	extern _UFRML
                                           	extern _UFRMH
                                           	extern _UIR
                                           	extern _UIE
                                           	extern _UEIR
                                           	extern _UEIE
                                           	extern _USTAT
                                           	extern _UCON
                                           	extern _UADDR
                                           	extern _UCFG
                                           	extern _UEP0
                                           	extern _UEP1
                                           	extern _UEP2
                                           	extern _UEP3
                                           	extern _UEP4
                                           	extern _UEP5
                                           	extern _UEP6
                                           	extern _UEP7
                                           	extern _UEP8
                                           	extern _UEP9
                                           	extern _UEP10
                                           	extern _UEP11
                                           	extern _UEP12
                                           	extern _UEP13
                                           	extern _UEP14
                                           	extern _UEP15
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _TRISC
                                           	extern _TRISD
                                           	extern _TRISE
                                           	extern _OSCTUNE
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _ECCP1DEL
                                           	extern _BAUDCON
                                           	extern _CCP2CON
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSPCON2
                                           	extern _SSPCON1
                                           	extern _SSPSTAT
                                           	extern _SSPADD
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _HLVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _int_setup
                                           	extern _osc_setup
                                           	extern _serial_setup
                                           	extern _serial_pop_fifo
                                           	extern _m600_setup
                                           	extern _m600_start_request
                                           	extern _m600_schedule
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PRODL	equ	0xff3
                                           
                                           
                                           	idata
                                           _toggle_led_ledc_1_1	db	0x00, 0x00
                                           _toggle_led_ledv_1_1	db	0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           
                                           udata_main_0	udata
                                           _main_is_done_1_1	res	2
                                           
                                           udata_main_1	udata
                                           _main_req_1_1	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector 
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_main__main	code
                                           _main:
000ab2   0102     movlb	0x2                	BANKSEL	_main_is_done_1_1
                                           ;	.line	37; ../src/main.c	volatile int is_done = 0;
000ab4   6b30     clrf	0x30, 0x1           	CLRF	_main_is_done_1_1, B
000ab6   0102     movlb	0x2                	BANKSEL	(_main_is_done_1_1 + 1)
000ab8   6b31     clrf	0x31, 0x1           	CLRF	(_main_is_done_1_1 + 1), B
                                           ;	.line	40; ../src/main.c	osc_setup();
000aba   ec3f     call	0xe7e, 0            	CALL	_osc_setup
000abc   f007
                                           ;	.line	41; ../src/main.c	int_setup();
000abe   eca2     call	0xd44, 0            	CALL	_int_setup
000ac0   f006
                                           ;	.line	42; ../src/main.c	m600_setup();
000ac2   ecfd     call	0xdfa, 0            	CALL	_m600_setup
000ac4   f006
                                           ;	.line	44; ../src/main.c	serial_setup();
000ac6   ec91     call	0xb22, 0            	CALL	_serial_setup
000ac8   f005
                                           _00117_DS_:
000aca   0102     movlb	0x2                	BANKSEL	_main_is_done_1_1
                                           ;	.line	46; ../src/main.c	while (!is_done)
000acc   5130     movf	0x30, 0, 0x1        	MOVF	_main_is_done_1_1, W, B
000ace   0102     movlb	0x2                	BANKSEL	(_main_is_done_1_1 + 1)
000ad0   1131     iorwf	0x31, 0, 0x1       	IORWF	(_main_is_done_1_1 + 1), W, B
000ad2   e124     bnz	0xb1c                	BNZ	_00119_DS_
                                           ;	.line	48; ../src/main.c	toggle_led();
000ad4   ece3     call	0xdc6, 0            	CALL	_toggle_led
000ad6   f006
                                           ;	.line	53; ../src/main.c	if (serial_pop_fifo((unsigned char*)&req) == -1)
000ad8   0e02     movlw	0x2                	MOVLW	HIGH(_main_req_1_1)
000ada   6e01     movwf	0x1, 0             	MOVWF	r0x01
000adc   0e32     movlw	0x32               	MOVLW	LOW(_main_req_1_1)
000ade   6e00     movwf	0, 0               	MOVWF	r0x00
000ae0   0e80     movlw	0x80               	MOVLW	0x80
000ae2   6e02     movwf	0x2, 0             	MOVWF	r0x02
000ae4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000ae6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ae8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000aea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000aec   5000     movf	0, 0, 0             	MOVF	r0x00, W
000aee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000af0   ecf5     call	0x1ea, 0            	CALL	_serial_pop_fifo
000af2   f000
000af4   6e00     movwf	0, 0               	MOVWF	r0x00
000af6   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
000af8   f001
000afa   0e03     movlw	0x3                	MOVLW	0x03
000afc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000afe   5000     movf	0, 0, 0             	MOVF	r0x00, W
000b00   0aff     xorlw	0xff               	XORLW	0xff
000b02   e103     bnz	0xb0a                	BNZ	_00126_DS_
000b04   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000b06   0aff     xorlw	0xff               	XORLW	0xff
000b08   e0e0     bz	0xaca                 	BZ	_00117_DS_
                                           _00126_DS_:
000b0a   0102     movlb	0x2                	BANKSEL	_main_req_1_1
                                           ;	.line	57; ../src/main.c	m600_start_request(req);
000b0c   5132     movf	0x32, 0, 0x1        	MOVF	_main_req_1_1, W, B
000b0e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b10   eca8     call	0xf50, 0            	CALL	_m600_start_request
000b12   f007
000b14   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	58; ../src/main.c	m600_schedule();
000b16   ec15     call	0x2a, 0             	CALL	_m600_schedule
000b18   f000
000b1a   d7d7     bra	0xaca                	BRA	_00117_DS_
                                           _00119_DS_:
                                           ;	.line	61; ../src/main.c	return 0;
000b1c   6af3     clrf	0xf3, 0             	CLRF	PRODL
000b1e   6ae8     clrf	0xe8, 0             	CLRF	WREG
000b20   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__toggle_led	code
                                           _toggle_led:
                                           ;	.line	19; ../src/main.c	static void toggle_led(void)
000dc6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000dc8   ffe5
000dca   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000dcc   ffd9
000dce   0102     movlb	0x2                	BANKSEL	_toggle_led_ledc_1_1
                                           ;	.line	24; ../src/main.c	if (++ledc < 0x4000)
000dd0   2b2b     incf	0x2b, 0x1, 0x1      	INCF	_toggle_led_ledc_1_1, F, B
000dd2   e302     bnc	0xdd8                	BNC	_10115_DS_
000dd4   0102     movlb	0x2                	BANKSEL	(_toggle_led_ledc_1_1 + 1)
000dd6   2b2c     incf	0x2c, 0x1, 0x1      	INCF	(_toggle_led_ledc_1_1 + 1), F, B
                                           _10115_DS_:
000dd8   0e40     movlw	0x40               	MOVLW	0x40
000dda   0102     movlb	0x2                	BANKSEL	(_toggle_led_ledc_1_1 + 1)
000ddc   5d2c     subwf	0x2c, 0, 0x1       	SUBWF	(_toggle_led_ledc_1_1 + 1), W, B
000dde   e103     bnz	0xde6                	BNZ	_00110_DS_
000de0   0e00     movlw	0                  	MOVLW	0x00
000de2   0102     movlb	0x2                	BANKSEL	_toggle_led_ledc_1_1
000de4   5d2b     subwf	0x2b, 0, 0x1       	SUBWF	_toggle_led_ledc_1_1, W, B
                                           _00110_DS_:
                                           ;	.line	25; ../src/main.c	return ;
000de6   e306     bnc	0xdf4                	BNC	_00107_DS_
                                           ;	.line	27; ../src/main.c	ledv ^= 1;
000de8   0e01     movlw	0x1                	MOVLW	0x01
000dea   0102     movlb	0x2                	BANKSEL	_toggle_led_ledv_1_1
000dec   1b2d     xorwf	0x2d, 0x1, 0x1     	XORWF	_toggle_led_ledv_1_1, F, B
                                           ;	.line	29; ../src/main.c	TRISA = 0;
000dee   6a92     clrf	0x92, 0             	CLRF	_TRISA
                                           ;	.line	30; ../src/main.c	LATA = ledv;
000df0   c22d     movff	0x22d, 0xf89       	MOVFF	_toggle_led_ledv_1_1, _LATA
000df2   ff89
                                           _00107_DS_:
000df4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000df6   ffd9
000df8   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  164 (0x00a4) bytes ( 0.13%)
                                           ;           	   82 (0x0052) words
                                           ; udata size:	    3 (0x0003) bytes ( 0.17%)
                                           ; access size:	    3 (0x0003) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.8.5 #5516 (Sep 20 2009) (UNIX)
                                           ; This file was generated Sat Nov 21 16:29:05 2009
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4550
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _osc_setup
                                           	global _osc_set_power
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _SPPDATAbits
                                           	extern _SPPCFGbits
                                           	extern _SPPEPSbits
                                           	extern _SPPCONbits
                                           	extern _UFRMLbits
                                           	extern _UFRMHbits
                                           	extern _UIRbits
                                           	extern _UIEbits
                                           	extern _UEIRbits
                                           	extern _UEIEbits
                                           	extern _USTATbits
                                           	extern _UCONbits
                                           	extern _UADDRbits
                                           	extern _UCFGbits
                                           	extern _UEP0bits
                                           	extern _UEP1bits
                                           	extern _UEP2bits
                                           	extern _UEP3bits
                                           	extern _UEP4bits
                                           	extern _UEP5bits
                                           	extern _UEP6bits
                                           	extern _UEP7bits
                                           	extern _UEP8bits
                                           	extern _UEP9bits
                                           	extern _UEP10bits
                                           	extern _UEP11bits
                                           	extern _UEP12bits
                                           	extern _UEP13bits
                                           	extern _UEP14bits
                                           	extern _UEP15bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _TRISCbits
                                           	extern _TRISDbits
                                           	extern _TRISEbits
                                           	extern _OSCTUNEbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCONbits
                                           	extern _CCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSPCON2bits
                                           	extern _SSPCON1bits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _HLVDCONbits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _FSR2Hbits
                                           	extern _BSRbits
                                           	extern _FSR1Hbits
                                           	extern _FSR0Hbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _TBLPTRUbits
                                           	extern _PCLATHbits
                                           	extern _PCLATUbits
                                           	extern _STKPTRbits
                                           	extern _TOSUbits
                                           	extern _SPPDATA
                                           	extern _SPPCFG
                                           	extern _SPPEPS
                                           	extern _SPPCON
                                           	extern _UFRML
                                           	extern _UFRMH
                                           	extern _UIR
                                           	extern _UIE
                                           	extern _UEIR
                                           	extern _UEIE
                                           	extern _USTAT
                                           	extern _UCON
                                           	extern _UADDR
                                           	extern _UCFG
                                           	extern _UEP0
                                           	extern _UEP1
                                           	extern _UEP2
                                           	extern _UEP3
                                           	extern _UEP4
                                           	extern _UEP5
                                           	extern _UEP6
                                           	extern _UEP7
                                           	extern _UEP8
                                           	extern _UEP9
                                           	extern _UEP10
                                           	extern _UEP11
                                           	extern _UEP12
                                           	extern _UEP13
                                           	extern _UEP14
                                           	extern _UEP15
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _TRISC
                                           	extern _TRISD
                                           	extern _TRISE
                                           	extern _OSCTUNE
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _ECCP1DEL
                                           	extern _BAUDCON
                                           	extern _CCP2CON
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSPCON2
                                           	extern _SSPCON1
                                           	extern _SSPSTAT
                                           	extern _SSPADD
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _HLVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCL	equ	0xff9
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_osc__osc_set_power	code
                                           _osc_set_power:
                                           ;	.line	37; ../src/osc.c	void osc_set_power(enum osc_pmode pmode)
000a34   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000a36   ffe5
000a38   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000a3a   ffd9
000a3c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000a3e   ffe5
000a40   0e02     movlw	0x2                	MOVLW	0x02
000a42   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000a44   f000
                                           ;	.line	39; ../src/osc.c	switch (pmode)
000a46   0e07     movlw	0x7                	MOVLW	0x07
000a48   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
000a4a   e22e     bc	0xaa8                 	BC	_00122_DS_
000a4c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000a4e   ffe5
000a50   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000a52   ffe5
000a54   6a02     clrf	0x2, 0              	CLRF	r0x02
000a56   3400     rlcf	0, 0, 0             	RLCF	r0x00, W
000a58   3602     rlcf	0x2, 0x1, 0         	RLCF	r0x02, F
000a5a   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
000a5c   3602     rlcf	0x2, 0x1, 0         	RLCF	r0x02, F
000a5e   0bfc     andlw	0xfc               	ANDLW	0xfc
000a60   6e01     movwf	0x1, 0             	MOVWF	r0x01
000a62   0e00     movlw	0                  	MOVLW	UPPER(_00126_DS_)
000a64   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
000a66   0e0a     movlw	0xa                	MOVLW	HIGH(_00126_DS_)
000a68   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
000a6a   0e82     movlw	0x82               	MOVLW	LOW(_00126_DS_)
000a6c   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000a6e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000a70   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
000a72   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000a74   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
000a76   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000a78   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000a7a   f002
000a7c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000a7e   f001
000a80   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00126_DS_:
000a82   ef4f     goto	0xa9e               	GOTO	_00113_DS_
000a84   f005
000a86   ef54     goto	0xaa8               	GOTO	_00122_DS_
000a88   f005
000a8a   ef54     goto	0xaa8               	GOTO	_00122_DS_
000a8c   f005
000a8e   ef54     goto	0xaa8               	GOTO	_00122_DS_
000a90   f005
000a92   ef52     goto	0xaa4               	GOTO	_00116_DS_
000a94   f005
000a96   ef52     goto	0xaa4               	GOTO	_00116_DS_
000a98   f005
000a9a   ef52     goto	0xaa4               	GOTO	_00116_DS_
000a9c   f005
                                           _00113_DS_:
                                           ;	.line	43; ../src/osc.c	OSCCONbits.IDLEN = 0;
000a9e   9ed3     bcf	0xd3, 0x7, 0         	BCF	_OSCCONbits, 7
000aa0   0003     sleep                    	sleep 
                                           ;	.line	45; ../src/osc.c	break;
000aa2   d002     bra	0xaa8                	BRA	_00122_DS_
                                           _00116_DS_:
                                           ;	.line	54; ../src/osc.c	OSCCONbits.IDLEN = 1;
000aa4   8ed3     bsf	0xd3, 0x7, 0         	BSF	_OSCCONbits, 7
000aa6   0003     sleep                    	sleep 
                                           _00122_DS_:
                                           ;	.line	66; ../src/osc.c	}
000aa8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000aaa   f000
000aac   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000aae   ffd9
000ab0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_osc__osc_setup	code
                                           _osc_setup:
                                           ;	.line	15; ../src/osc.c	void osc_setup(void)
000e7e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000e80   ffe5
000e82   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000e84   ffd9
                                           ;	.line	19; ../src/osc.c	OSCCONbits.IRCF = 7;
000e86   50d3     movf	0xd3, 0, 0          	MOVF	_OSCCONbits, W
000e88   0b8f     andlw	0x8f               	ANDLW	0x8f
000e8a   0970     iorlw	0x70               	IORLW	0x70
000e8c   6ed3     movwf	0xd3, 0            	MOVWF	_OSCCONbits
                                           ;	.line	23; ../src/osc.c	OSCCONbits.SCS = 2;
000e8e   50d3     movf	0xd3, 0, 0          	MOVF	_OSCCONbits, W
000e90   0bfc     andlw	0xfc               	ANDLW	0xfc
000e92   0902     iorlw	0x2                	IORLW	0x02
000e94   6ed3     movwf	0xd3, 0            	MOVWF	_OSCCONbits
                                           ;	.line	28; ../src/osc.c	OSCCONbits.IDLEN = 1;
000e96   8ed3     bsf	0xd3, 0x7, 0         	BSF	_OSCCONbits, 7
                                           _00105_DS_:
                                           ;	.line	32; ../src/osc.c	while (!OSCCONbits.IOFS)
000e98   a4d3     btfss	0xd3, 0x2, 0       	BTFSS	_OSCCONbits, 2
000e9a   d7fe     bra	0xe98                	BRA	_00105_DS_
000e9c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000e9e   ffd9
000ea0   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  162 (0x00a2) bytes ( 0.12%)
                                           ;           	   81 (0x0051) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    3 (0x0003) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.8.5 #5516 (Sep 20 2009) (UNIX)
                                           ; This file was generated Sat Nov 21 16:29:05 2009
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4550
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _on_low_interrupt
                                           	global _int_setup
                                           	global _int_disable
                                           	global _int_restore
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrput1
                                           	extern _SPPDATAbits
                                           	extern _SPPCFGbits
                                           	extern _SPPEPSbits
                                           	extern _SPPCONbits
                                           	extern _UFRMLbits
                                           	extern _UFRMHbits
                                           	extern _UIRbits
                                           	extern _UIEbits
                                           	extern _UEIRbits
                                           	extern _UEIEbits
                                           	extern _USTATbits
                                           	extern _UCONbits
                                           	extern _UADDRbits
                                           	extern _UCFGbits
                                           	extern _UEP0bits
                                           	extern _UEP1bits
                                           	extern _UEP2bits
                                           	extern _UEP3bits
                                           	extern _UEP4bits
                                           	extern _UEP5bits
                                           	extern _UEP6bits
                                           	extern _UEP7bits
                                           	extern _UEP8bits
                                           	extern _UEP9bits
                                           	extern _UEP10bits
                                           	extern _UEP11bits
                                           	extern _UEP12bits
                                           	extern _UEP13bits
                                           	extern _UEP14bits
                                           	extern _UEP15bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _TRISCbits
                                           	extern _TRISDbits
                                           	extern _TRISEbits
                                           	extern _OSCTUNEbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCONbits
                                           	extern _CCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSPCON2bits
                                           	extern _SSPCON1bits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _HLVDCONbits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _FSR2Hbits
                                           	extern _BSRbits
                                           	extern _FSR1Hbits
                                           	extern _FSR0Hbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _TBLPTRUbits
                                           	extern _PCLATHbits
                                           	extern _PCLATUbits
                                           	extern _STKPTRbits
                                           	extern _TOSUbits
                                           	extern _SPPDATA
                                           	extern _SPPCFG
                                           	extern _SPPEPS
                                           	extern _SPPCON
                                           	extern _UFRML
                                           	extern _UFRMH
                                           	extern _UIR
                                           	extern _UIE
                                           	extern _UEIR
                                           	extern _UEIE
                                           	extern _USTAT
                                           	extern _UCON
                                           	extern _UADDR
                                           	extern _UCFG
                                           	extern _UEP0
                                           	extern _UEP1
                                           	extern _UEP2
                                           	extern _UEP3
                                           	extern _UEP4
                                           	extern _UEP5
                                           	extern _UEP6
                                           	extern _UEP7
                                           	extern _UEP8
                                           	extern _UEP9
                                           	extern _UEP10
                                           	extern _UEP11
                                           	extern _UEP12
                                           	extern _UEP13
                                           	extern _UEP14
                                           	extern _UEP15
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _TRISC
                                           	extern _TRISD
                                           	extern _TRISE
                                           	extern _OSCTUNE
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _ECCP1DEL
                                           	extern _BAUDCON
                                           	extern _CCP2CON
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSPCON2
                                           	extern _SSPCON1
                                           	extern _SSPSTAT
                                           	extern _SSPADD
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _HLVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _serial_handle_interrupt
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_int_ivec_0x2_on_low_interrupt	code	0X000018
                                           ivec_0x2_on_low_interrupt:
000018   eff4     goto	0xbe8               	GOTO	_on_low_interrupt
00001a   f005
                                           
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_int__int_restore	code
                                           _int_restore:
                                           ;	.line	62; ../src/int.c	void int_restore(unsigned char prev_state)
000e2c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000e2e   ffe5
000e30   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000e32   ffd9
000e34   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000e36   ffe5
000e38   0e02     movlw	0x2                	MOVLW	0x02
000e3a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000e3c   f000
                                           ;	.line	64; ../src/int.c	INTCONbits.GIE = prev_state;
000e3e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000e40   0b01     andlw	0x1                	ANDLW	0x01
000e42   40e8     rrncf	0xe8, 0, 0         	RRNCF	WREG, W
000e44   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
000e46   50f2     movf	0xf2, 0, 0          	MOVF	_INTCONbits, W
000e48   0b7f     andlw	0x7f               	ANDLW	0x7f
000e4a   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
000e4c   6ef2     movwf	0xf2, 0            	MOVWF	_INTCONbits
000e4e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000e50   f000
000e52   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000e54   ffd9
000e56   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_int__int_disable	code
                                           _int_disable:
                                           ;	.line	56; ../src/int.c	void int_disable(unsigned char* prev_state)
000c42   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000c44   ffe5
000c46   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000c48   ffd9
000c4a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000c4c   ffe5
000c4e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000c50   ffe5
000c52   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000c54   ffe5
000c56   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000c58   ffe5
000c5a   0e02     movlw	0x2                	MOVLW	0x02
000c5c   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000c5e   f000
000c60   0e03     movlw	0x3                	MOVLW	0x03
000c62   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
000c64   f001
000c66   0e04     movlw	0x4                	MOVLW	0x04
000c68   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
000c6a   f002
                                           ;	.line	58; ../src/int.c	*prev_state = INTCONbits.GIE;
000c6c   6a03     clrf	0x3, 0              	CLRF	r0x03
000c6e   bef2     btfsc	0xf2, 0x7, 0       	BTFSC	_INTCONbits, 7
000c70   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
000c72   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000c74   ffe5
000c76   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000c78   ffe9
000c7a   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000c7c   fff3
000c7e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000c80   ecbc     call	0xf78, 0            	CALL	__gptrput1
000c82   f007
000c84   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000c86   f003
000c88   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000c8a   f002
000c8c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000c8e   f001
000c90   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000c92   f000
000c94   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000c96   ffd9
000c98   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_int__int_setup	code
                                           _int_setup:
                                           ;	.line	29; ../src/int.c	void int_setup(void)
000d44   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000d46   ffe5
000d48   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000d4a   ffd9
000d4c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000d4e   ffe5
000d50   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000d52   ffe5
                                           ;	.line	33; ../src/int.c	RCON = 0;
000d54   6ad0     clrf	0xd0, 0             	CLRF	_RCON
                                           ;	.line	34; ../src/int.c	INTCON = 0;
000d56   6af2     clrf	0xf2, 0             	CLRF	_INTCON
                                           ;	.line	35; ../src/int.c	INTCON2 = 0;
000d58   6af1     clrf	0xf1, 0             	CLRF	_INTCON2
                                           ;	.line	37; ../src/int.c	RCONbits.IPEN = 0;
000d5a   9ed0     bcf	0xd0, 0x7, 0         	BCF	_RCONbits, 7
                                           ;	.line	39; ../src/int.c	INTCONbits.PEIE = 1;
000d5c   8cf2     bsf	0xf2, 0x6, 0         	BSF	_INTCONbits, 6
                                           ;	.line	40; ../src/int.c	INTCONbits.GIE = 1;
000d5e   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	42; ../src/int.c	INTCON2bits.RBIP = 0;
000d60   90f1     bcf	0xf1, 0, 0           	BCF	_INTCON2bits, 0
                                           ;	.line	48; ../src/int.c	for (i = 0; i < 1000; ++i)
000d62   0ee8     movlw	0xe8               	MOVLW	0xe8
000d64   6e00     movwf	0, 0               	MOVWF	r0x00
000d66   0e03     movlw	0x3                	MOVLW	0x03
000d68   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           _00112_DS_:
000d6a   0000     nop                      	nop 
000d6c   0eff     movlw	0xff               	MOVLW	0xff
000d6e   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000d70   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000d72   0601     decf	0x1, 0x1, 0         	DECF	r0x01, F
                                           ;	.line	48; ../src/int.c	for (i = 0; i < 1000; ++i)
000d74   5000     movf	0, 0, 0             	MOVF	r0x00, W
000d76   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
000d78   e1f8     bnz	0xd6a                	BNZ	_00112_DS_
000d7a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000d7c   f001
000d7e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000d80   f000
000d82   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000d84   ffd9
000d86   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_int__on_low_interrupt	code
                                           _on_low_interrupt:
                                           ;	.line	21; ../src/int.c	void on_low_interrupt(void) __interrupt 2
000be8   cfe8     movff	0xfe8, 0xfe5       	MOVFF	WREG, POSTDEC1
000bea   ffe5
000bec   cfd8     movff	0xfd8, 0xfe5       	MOVFF	STATUS, POSTDEC1
000bee   ffe5
000bf0   cfe0     movff	0xfe0, 0xfe5       	MOVFF	BSR, POSTDEC1
000bf2   ffe5
000bf4   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
000bf6   ffe5
000bf8   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
000bfa   ffe5
000bfc   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
000bfe   ffe5
000c00   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
000c02   ffe5
000c04   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
000c06   ffe5
000c08   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
000c0a   ffe5
000c0c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000c0e   ffe5
000c10   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000c12   ffd9
                                           ;	.line	24; ../src/int.c	serial_handle_interrupt();
000c14   ecd9     call	0x9b2, 0            	CALL	_serial_handle_interrupt
000c16   f004
000c18   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000c1a   ffd9
000c1c   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
000c1e   fffb
000c20   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
000c22   fffa
000c24   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
000c26   ffea
000c28   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
000c2a   ffe9
000c2c   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
000c2e   fff4
000c30   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
000c32   fff3
000c34   cfe4     movff	0xfe4, 0xfe0       	MOVFF	PREINC1, BSR
000c36   ffe0
000c38   cfe4     movff	0xfe4, 0xfd8       	MOVFF	PREINC1, STATUS
000c3a   ffd8
000c3c   cfe4     movff	0xfe4, 0xfe8       	MOVFF	PREINC1, WREG
000c3e   ffe8
000c40   0010     retfie	0                 	RETFIE	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  292 (0x0124) bytes ( 0.22%)
                                           ;           	  146 (0x0092) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    4 (0x0004) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.8.5 #5516 (Sep 20 2009) (UNIX)
                                           ; This file was generated Sat Nov 21 16:29:05 2009
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4550
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _m600_setup
                                           	global _m600_start_request
                                           	global _m600_schedule
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrput2
                                           	extern __gptrput1
                                           	extern _SPPDATAbits
                                           	extern _SPPCFGbits
                                           	extern _SPPEPSbits
                                           	extern _SPPCONbits
                                           	extern _UFRMLbits
                                           	extern _UFRMHbits
                                           	extern _UIRbits
                                           	extern _UIEbits
                                           	extern _UEIRbits
                                           	extern _UEIEbits
                                           	extern _USTATbits
                                           	extern _UCONbits
                                           	extern _UADDRbits
                                           	extern _UCFGbits
                                           	extern _UEP0bits
                                           	extern _UEP1bits
                                           	extern _UEP2bits
                                           	extern _UEP3bits
                                           	extern _UEP4bits
                                           	extern _UEP5bits
                                           	extern _UEP6bits
                                           	extern _UEP7bits
                                           	extern _UEP8bits
                                           	extern _UEP9bits
                                           	extern _UEP10bits
                                           	extern _UEP11bits
                                           	extern _UEP12bits
                                           	extern _UEP13bits
                                           	extern _UEP14bits
                                           	extern _UEP15bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _TRISCbits
                                           	extern _TRISDbits
                                           	extern _TRISEbits
                                           	extern _OSCTUNEbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCONbits
                                           	extern _CCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSPCON2bits
                                           	extern _SSPCON1bits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _HLVDCONbits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _FSR2Hbits
                                           	extern _BSRbits
                                           	extern _FSR1Hbits
                                           	extern _FSR0Hbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _TBLPTRUbits
                                           	extern _PCLATHbits
                                           	extern _PCLATUbits
                                           	extern _STKPTRbits
                                           	extern _TOSUbits
                                           	extern _SPPDATA
                                           	extern _SPPCFG
                                           	extern _SPPEPS
                                           	extern _SPPCON
                                           	extern _UFRML
                                           	extern _UFRMH
                                           	extern _UIR
                                           	extern _UIE
                                           	extern _UEIR
                                           	extern _UEIE
                                           	extern _USTAT
                                           	extern _UCON
                                           	extern _UADDR
                                           	extern _UCFG
                                           	extern _UEP0
                                           	extern _UEP1
                                           	extern _UEP2
                                           	extern _UEP3
                                           	extern _UEP4
                                           	extern _UEP5
                                           	extern _UEP6
                                           	extern _UEP7
                                           	extern _UEP8
                                           	extern _UEP9
                                           	extern _UEP10
                                           	extern _UEP11
                                           	extern _UEP12
                                           	extern _UEP13
                                           	extern _UEP14
                                           	extern _UEP15
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _TRISC
                                           	extern _TRISD
                                           	extern _TRISE
                                           	extern _OSCTUNE
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _ECCP1DEL
                                           	extern _BAUDCON
                                           	extern _CCP2CON
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSPCON2
                                           	extern _SSPCON1
                                           	extern _SSPSTAT
                                           	extern _SSPADD
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _HLVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _serial_write
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTINC0	equ	0xfee
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _m600_request	db	0xff
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           
                                           udata_m600_0	udata
                                           _m600_reply	res	162
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_m600__m600_schedule	code
                                           _m600_schedule:
                                           ;	.line	197; ../src/m600.c	void m600_schedule(void)
00002a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00002c   ffe5
00002e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000030   ffd9
000032   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000034   ffe5
000036   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000038   ffe5
00003a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00003c   ffe5
00003e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000040   ffe5
000042   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000044   ffe5
000046   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000048   ffe5
00004a   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00004c   ffe5
00004e   0102     movlb	0x2                	BANKSEL	_m600_request
                                           ;	.line	201; ../src/m600.c	switch (m600_request)
000050   512e     movf	0x2e, 0, 0x1        	MOVF	_m600_request, W, B
000052   e00e     bz	0x70                  	BZ	_00173_DS_
                                           _00197_DS_:
000054   0102     movlb	0x2                	BANKSEL	_m600_request
000056   512e     movf	0x2e, 0, 0x1        	MOVF	_m600_request, W, B
000058   0a01     xorlw	0x1                	XORLW	0x01
00005a   e026     bz	0xa8                  	BZ	_00174_DS_
                                           _00199_DS_:
00005c   0102     movlb	0x2                	BANKSEL	_m600_request
00005e   512e     movf	0x2e, 0, 0x1        	MOVF	_m600_request, W, B
000060   0a02     xorlw	0x2                	XORLW	0x02
000062   e030     bz	0xc4                  	BZ	_00193_DS_
                                           _00201_DS_:
000064   0102     movlb	0x2                	BANKSEL	_m600_request
000066   512e     movf	0x2e, 0, 0x1        	MOVF	_m600_request, W, B
000068   0a03     xorlw	0x3                	XORLW	0x03
00006a   e101     bnz	0x6e                 	BNZ	_00203_DS_
00006c   d04e     bra	0x10a                	BRA	_00176_DS_
                                           _00203_DS_:
00006e   d092     bra	0x194                	BRA	_00178_DS_
                                           _00173_DS_:
                                           ;	.line	205; ../src/m600.c	m600_reply.alarms = m600_read_card(m600_reply.card_data);
000070   0e01     movlw	0x1                	MOVLW	HIGH(_m600_reply + 2)
000072   6e01     movwf	0x1, 0             	MOVWF	r0x01
000074   0e82     movlw	0x82               	MOVLW	LOW(_m600_reply + 2)
000076   6e00     movwf	0, 0               	MOVWF	r0x00
000078   0e80     movlw	0x80               	MOVLW	0x80
00007a   6e02     movwf	0x2, 0             	MOVWF	r0x02
00007c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00007e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000080   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000082   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000084   5000     movf	0, 0, 0             	MOVF	r0x00, W
000086   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000088   ec46     call	0x48c, 0            	CALL	_m600_read_card
00008a   f002
00008c   6e00     movwf	0, 0               	MOVWF	r0x00
00008e   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
000090   f001
000092   0e03     movlw	0x3                	MOVLW	0x03
000094   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000096   5000     movf	0, 0, 0             	MOVF	r0x00, W
000098   0101     movlb	0x1                	BANKSEL	_m600_reply
00009a   6f80     movwf	0x80, 0x1          	MOVWF	_m600_reply, B
00009c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00009e   0101     movlb	0x1                	BANKSEL	(_m600_reply + 1)
0000a0   6f81     movwf	0x81, 0x1          	MOVWF	(_m600_reply + 1), B
                                           ;	.line	207; ../src/m600.c	do_reply = 1;
0000a2   0e01     movlw	0x1                	MOVLW	0x01
0000a4   6e00     movwf	0, 0               	MOVWF	r0x00
                                           ;	.line	209; ../src/m600.c	break;
0000a6   d077     bra	0x196                	BRA	_00179_DS_
                                           _00174_DS_:
                                           ;	.line	214; ../src/m600.c	m600_reply.alarms = m600_read_alarms();
0000a8   ecc4     call	0xd88, 0            	CALL	_m600_read_alarms
0000aa   f006
0000ac   6e01     movwf	0x1, 0             	MOVWF	r0x01
0000ae   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
0000b0   f002
0000b2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0000b4   0101     movlb	0x1                	BANKSEL	_m600_reply
0000b6   6f80     movwf	0x80, 0x1          	MOVWF	_m600_reply, B
0000b8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0000ba   0101     movlb	0x1                	BANKSEL	(_m600_reply + 1)
0000bc   6f81     movwf	0x81, 0x1          	MOVWF	(_m600_reply + 1), B
                                           ;	.line	216; ../src/m600.c	do_reply = 1;
0000be   0e01     movlw	0x1                	MOVLW	0x01
0000c0   6e00     movwf	0, 0               	MOVWF	r0x00
                                           ;	.line	218; ../src/m600.c	break;
0000c2   d069     bra	0x196                	BRA	_00179_DS_
                                           _00193_DS_:
                                           ;	.line	225; ../src/m600.c	for (i = 0; i < M600_COLUMN_COUNT; ++i)
0000c4   6a01     clrf	0x1, 0              	CLRF	r0x01
0000c6   6a02     clrf	0x2, 0              	CLRF	r0x02
0000c8   6a03     clrf	0x3, 0              	CLRF	r0x03
0000ca   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00182_DS_:
0000cc   0e00     movlw	0                  	MOVLW	0x00
0000ce   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
0000d0   e102     bnz	0xd6                 	BNZ	_00204_DS_
0000d2   0e50     movlw	0x50               	MOVLW	0x50
0000d4   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00204_DS_:
0000d6   e216     bc	0x104                 	BC	_00185_DS_
                                           ;	.line	226; ../src/m600.c	m600_reply.card_data[i] = i;
0000d8   0e82     movlw	0x82               	MOVLW	LOW(_m600_reply + 2)
0000da   2403     addwf	0x3, 0, 0          	ADDWF	r0x03, W
0000dc   6e05     movwf	0x5, 0             	MOVWF	r0x05
0000de   0e01     movlw	0x1                	MOVLW	HIGH(_m600_reply + 2)
0000e0   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
0000e2   6e06     movwf	0x6, 0             	MOVWF	r0x06
0000e4   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
0000e6   ffe9
0000e8   c006     movff	0x6, 0xfea         	MOVFF	r0x06, FSR0H
0000ea   ffea
0000ec   c001     movff	0x1, 0xfee         	MOVFF	r0x01, POSTINC0
0000ee   ffee
0000f0   c002     movff	0x2, 0xfef         	MOVFF	r0x02, INDF0
0000f2   ffef
                                           ;	.line	225; ../src/m600.c	for (i = 0; i < M600_COLUMN_COUNT; ++i)
0000f4   0e02     movlw	0x2                	MOVLW	0x02
0000f6   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
0000f8   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0000fa   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
0000fc   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0000fe   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000100   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
000102   d7e4     bra	0xcc                 	BRA	_00182_DS_
                                           _00185_DS_:
                                           ;	.line	228; ../src/m600.c	do_reply = 1;
000104   0e01     movlw	0x1                	MOVLW	0x01
000106   6e00     movwf	0, 0               	MOVWF	r0x00
                                           ;	.line	230; ../src/m600.c	break;
000108   d046     bra	0x196                	BRA	_00179_DS_
                                           _00176_DS_:
                                           ;	.line	235; ../src/m600.c	uint8_t* const p = (uint8_t*)m600_reply.card_data;
00010a   0e01     movlw	0x1                	MOVLW	HIGH(_m600_reply + 2)
00010c   6e02     movwf	0x2, 0             	MOVWF	r0x02
00010e   0e82     movlw	0x82               	MOVLW	LOW(_m600_reply + 2)
000110   6e01     movwf	0x1, 0             	MOVWF	r0x01
000112   0e80     movlw	0x80               	MOVLW	0x80
000114   6e03     movwf	0x3, 0             	MOVWF	r0x03
                                           ;	.line	237; ../src/m600.c	p[0] = PORTA;
000116   cf80     movff	0xf80, 0xfe5       	MOVFF	_PORTA, POSTDEC1
000118   ffe5
00011a   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
00011c   ffe9
00011e   c002     movff	0x2, 0xff3         	MOVFF	r0x02, PRODL
000120   fff3
000122   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000124   ecbc     call	0xf78, 0            	CALL	__gptrput1
000126   f007
                                           ;	.line	238; ../src/m600.c	p[1] = PORTB;
000128   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00012a   0f01     addlw	0x1                	ADDLW	0x01
00012c   6e04     movwf	0x4, 0             	MOVWF	r0x04
00012e   0e00     movlw	0                  	MOVLW	0x00
000130   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
000132   6e05     movwf	0x5, 0             	MOVWF	r0x05
000134   0e00     movlw	0                  	MOVLW	0x00
000136   2003     addwfc	0x3, 0, 0         	ADDWFC	r0x03, W
000138   6e06     movwf	0x6, 0             	MOVWF	r0x06
00013a   cf81     movff	0xf81, 0xfe5       	MOVFF	_PORTB, POSTDEC1
00013c   ffe5
00013e   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
000140   ffe9
000142   c005     movff	0x5, 0xff3         	MOVFF	r0x05, PRODL
000144   fff3
000146   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000148   ecbc     call	0xf78, 0            	CALL	__gptrput1
00014a   f007
                                           ;	.line	239; ../src/m600.c	p[2] = PORTC;
00014c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00014e   0f02     addlw	0x2                	ADDLW	0x02
000150   6e04     movwf	0x4, 0             	MOVWF	r0x04
000152   0e00     movlw	0                  	MOVLW	0x00
000154   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
000156   6e05     movwf	0x5, 0             	MOVWF	r0x05
000158   0e00     movlw	0                  	MOVLW	0x00
00015a   2003     addwfc	0x3, 0, 0         	ADDWFC	r0x03, W
00015c   6e06     movwf	0x6, 0             	MOVWF	r0x06
00015e   cf82     movff	0xf82, 0xfe5       	MOVFF	_PORTC, POSTDEC1
000160   ffe5
000162   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
000164   ffe9
000166   c005     movff	0x5, 0xff3         	MOVFF	r0x05, PRODL
000168   fff3
00016a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00016c   ecbc     call	0xf78, 0            	CALL	__gptrput1
00016e   f007
                                           ;	.line	240; ../src/m600.c	p[3] = PORTD;
000170   0e03     movlw	0x3                	MOVLW	0x03
000172   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000174   0e00     movlw	0                  	MOVLW	0x00
000176   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000178   0e00     movlw	0                  	MOVLW	0x00
00017a   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00017c   cf83     movff	0xf83, 0xfe5       	MOVFF	_PORTD, POSTDEC1
00017e   ffe5
000180   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
000182   ffe9
000184   c002     movff	0x2, 0xff3         	MOVFF	r0x02, PRODL
000186   fff3
000188   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00018a   ecbc     call	0xf78, 0            	CALL	__gptrput1
00018c   f007
                                           ;	.line	242; ../src/m600.c	do_reply = 1;
00018e   0e01     movlw	0x1                	MOVLW	0x01
000190   6e00     movwf	0, 0               	MOVWF	r0x00
                                           ;	.line	244; ../src/m600.c	break;
000192   d001     bra	0x196                	BRA	_00179_DS_
                                           _00178_DS_:
                                           ;	.line	250; ../src/m600.c	do_reply = 0;
000194   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00179_DS_:
                                           ;	.line	257; ../src/m600.c	m600_request = M600_REQ_INVALID;
000196   0eff     movlw	0xff               	MOVLW	0xff
000198   0102     movlb	0x2                	BANKSEL	_m600_request
00019a   6f2e     movwf	0x2e, 0x1          	MOVWF	_m600_request, B
                                           ;	.line	259; ../src/m600.c	if (!do_reply)
00019c   5000     movf	0, 0, 0             	MOVF	r0x00, W
                                           ;	.line	260; ../src/m600.c	return ;
00019e   e014     bz	0x1c8                 	BZ	_00186_DS_
                                           ;	.line	264; ../src/m600.c	serial_write((unsigned char*)&m600_reply, sizeof(m600_reply_t));
0001a0   0e01     movlw	0x1                	MOVLW	HIGH(_m600_reply)
0001a2   6e01     movwf	0x1, 0             	MOVWF	r0x01
0001a4   0e80     movlw	0x80               	MOVLW	LOW(_m600_reply)
0001a6   6e00     movwf	0, 0               	MOVWF	r0x00
0001a8   0e80     movlw	0x80               	MOVLW	0x80
0001aa   6e02     movwf	0x2, 0             	MOVWF	r0x02
0001ac   0e00     movlw	0                  	MOVLW	0x00
0001ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0001b0   0ea2     movlw	0xa2               	MOVLW	0xa2
0001b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0001b4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0001b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0001b8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0001ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0001bc   5000     movf	0, 0, 0             	MOVF	r0x00, W
0001be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0001c0   ecd9     call	0x7b2, 0            	CALL	_serial_write
0001c2   f003
0001c4   0e05     movlw	0x5                	MOVLW	0x05
0001c6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00186_DS_:
0001c8   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0001ca   f006
0001cc   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0001ce   f005
0001d0   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0001d2   f004
0001d4   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0001d6   f003
0001d8   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0001da   f002
0001dc   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0001de   f001
0001e0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0001e2   f000
0001e4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0001e6   ffd9
0001e8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_m600__m600_start_request	code
                                           _m600_start_request:
                                           ;	.line	191; ../src/m600.c	void m600_start_request(m600_request_t req)
000f50   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000f52   ffe5
000f54   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000f56   ffd9
000f58   0e02     movlw	0x2                	MOVLW	0x02
000f5a   cfdb     movff	0xfdb, 0x22e       	MOVFF	PLUSW2, _m600_request
000f5c   f22e
                                           ;	.line	193; ../src/m600.c	m600_request = req;
000f5e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000f60   ffd9
000f62   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_m600__m600_setup	code
                                           _m600_setup:
                                           ;	.line	156; ../src/m600.c	void m600_setup(void)
000dfa   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000dfc   ffe5
000dfe   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000e00   ffd9
                                           ;	.line	163; ../src/m600.c	ADCON0 = 0;
000e02   6ac2     clrf	0xc2, 0             	CLRF	_ADCON0
                                           ;	.line	164; ../src/m600.c	ADCON1 = 0xf;
000e04   0e0f     movlw	0xf                	MOVLW	0x0f
000e06   6ec1     movwf	0xc1, 0            	MOVWF	_ADCON1
                                           ;	.line	165; ../src/m600.c	ADCON2 = 0;
000e08   6ac0     clrf	0xc0, 0             	CLRF	_ADCON2
                                           ;	.line	167; ../src/m600.c	SPPCON = 0;
000e0a   6a65     clrf	0x65, 0             	CLRF	_SPPCON
                                           ;	.line	170; ../src/m600.c	M600_TRIS_DATA_LOW = 1;
000e0c   0e01     movlw	0x1                	MOVLW	0x01
000e0e   6e93     movwf	0x93, 0            	MOVWF	_TRISB
                                           ;	.line	171; ../src/m600.c	M600_TRIS_DATA_HIGH = 1;
000e10   0e01     movlw	0x1                	MOVLW	0x01
000e12   6e92     movwf	0x92, 0            	MOVWF	_TRISA
                                           ;	.line	172; ../src/m600.c	M600_TRIS_ALARMS = 1;
000e14   0e01     movlw	0x1                	MOVLW	0x01
000e16   6e95     movwf	0x95, 0            	MOVWF	_TRISD
                                           ;	.line	173; ../src/m600.c	M600_TRIS_INDEX_MARK = 1;
000e18   8094     bsf	0x94, 0, 0           	BSF	_TRISCbits, 0
                                           ;	.line	174; ../src/m600.c	M600_TRIS_READY = 1;
000e1a   8294     bsf	0x94, 0x1, 0         	BSF	_TRISCbits, 1
                                           ;	.line	175; ../src/m600.c	M600_TRIS_BUSY = 1;
000e1c   8494     bsf	0x94, 0x2, 0         	BSF	_TRISCbits, 2
                                           ;	.line	183; ../src/m600.c	M600_TRIS_PICK_CMD = 0;
000e1e   9695     bcf	0x95, 0x3, 0         	BCF	_TRISDbits, 3
                                           ;	.line	187; ../src/m600.c	m600_request = M600_REQ_INVALID;
000e20   0eff     movlw	0xff               	MOVLW	0xff
000e22   0102     movlb	0x2                	BANKSEL	_m600_request
000e24   6f2e     movwf	0x2e, 0x1          	MOVWF	_m600_request, B
000e26   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000e28   ffd9
000e2a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_m600__m600_read_card	code
                                           _m600_read_card:
                                           ;	.line	90; ../src/m600.c	static m600_alarms_t m600_read_card(uint16_t* col_data)
00048c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00048e   ffe5
000490   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000492   ffd9
000494   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000496   ffe5
000498   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00049a   ffe5
00049c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00049e   ffe5
0004a0   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0004a2   ffe5
0004a4   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0004a6   ffe5
0004a8   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0004aa   ffe5
0004ac   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0004ae   ffe5
0004b0   0e02     movlw	0x2                	MOVLW	0x02
0004b2   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0004b4   f000
0004b6   0e03     movlw	0x3                	MOVLW	0x03
0004b8   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0004ba   f001
0004bc   0e04     movlw	0x4                	MOVLW	0x04
0004be   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0004c0   f002
                                           _00139_DS_:
                                           ;	.line	95; ../src/m600.c	while (!M600_PIN_READY)
0004c2   a282     btfss	0x82, 0x1, 0       	BTFSS	_PORTCbits, 1
0004c4   d7fe     bra	0x4c2                	BRA	_00139_DS_
                                           _00142_DS_:
                                           ;	.line	99; ../src/m600.c	while (M600_PIN_BUSY)
0004c6   b482     btfsc	0x82, 0x2, 0       	BTFSC	_PORTCbits, 2
0004c8   d7fe     bra	0x4c6                	BRA	_00142_DS_
                                           ;	.line	107; ../src/m600.c	M600_PIN_PICK_CMD = 1;
0004ca   868c     bsf	0x8c, 0x3, 0         	BSF	_LATDbits, 3
                                           _00147_DS_:
                                           ;	.line	110; ../src/m600.c	while (M600_PIN_BUSY)
0004cc   a482     btfss	0x82, 0x2, 0       	BTFSS	_PORTCbits, 2
0004ce   d00c     bra	0x4e8                	BRA	_00149_DS_
                                           ;	.line	116; ../src/m600.c	if (M600_PIN_ERROR)
0004d0   a083     btfss	0x83, 0, 0         	BTFSS	_PORTDbits, 0
0004d2   d7fc     bra	0x4cc                	BRA	_00147_DS_
                                           ;	.line	118; ../src/m600.c	M600_PIN_PICK_CMD = 0;
0004d4   968c     bcf	0x8c, 0x3, 0         	BCF	_LATDbits, 3
                                           ;	.line	119; ../src/m600.c	return m600_read_alarms();
0004d6   ecc4     call	0xd88, 0            	CALL	_m600_read_alarms
0004d8   f006
0004da   6e03     movwf	0x3, 0             	MOVWF	r0x03
0004dc   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0004de   f004
0004e0   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0004e2   fff3
0004e4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0004e6   d028     bra	0x538                	BRA	_00158_DS_
                                           _00149_DS_:
                                           ;	.line	123; ../src/m600.c	M600_PIN_PICK_CMD = 0;
0004e8   968c     bcf	0x8c, 0x3, 0         	BCF	_LATDbits, 3
                                           ;	.line	126; ../src/m600.c	while (col_count)
0004ea   0e50     movlw	0x50               	MOVLW	0x50
0004ec   6e03     movwf	0x3, 0             	MOVWF	r0x03
0004ee   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00155_DS_:
0004f0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0004f2   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
0004f4   e01f     bz	0x534                 	BZ	_00157_DS_
                                           ;	.line	135; ../src/m600.c	if (M600_PIN_INDEX_MARK)
0004f6   a082     btfss	0x82, 0, 0         	BTFSS	_PORTCbits, 0
0004f8   d7fb     bra	0x4f0                	BRA	_00155_DS_
                                           _00150_DS_:
                                           ;	.line	140; ../src/m600.c	while (M600_PIN_INDEX_MARK)
0004fa   b082     btfsc	0x82, 0, 0         	BTFSC	_PORTCbits, 0
0004fc   d7fe     bra	0x4fa                	BRA	_00150_DS_
                                           ;	.line	143; ../src/m600.c	*col_data = read_data_reg();
0004fe   ec79     call	0xcf2, 0            	CALL	_read_data_reg
000500   f006
000502   6e05     movwf	0x5, 0             	MOVWF	r0x05
000504   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
000506   f006
000508   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00050a   ffe5
00050c   c006     movff	0x6, 0xff4         	MOVFF	r0x06, PRODH
00050e   fff4
000510   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000512   ffe9
000514   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000516   fff3
000518   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00051a   ec9c     call	0xf38, 0            	CALL	__gptrput2
00051c   f007
                                           ;	.line	145; ../src/m600.c	++col_data;
00051e   0e02     movlw	0x2                	MOVLW	0x02
000520   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000522   0e00     movlw	0                  	MOVLW	0x00
000524   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000526   0e00     movlw	0                  	MOVLW	0x00
000528   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
                                           ;	.line	146; ../src/m600.c	--col_count;
00052a   0eff     movlw	0xff               	MOVLW	0xff
00052c   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
00052e   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000530   0604     decf	0x4, 0x1, 0         	DECF	r0x04, F
000532   d7de     bra	0x4f0                	BRA	_00155_DS_
                                           _00157_DS_:
                                           ;	.line	150; ../src/m600.c	return M600_ALARM_NONE;
000534   6af3     clrf	0xf3, 0             	CLRF	PRODL
000536   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00158_DS_:
000538   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00053a   f006
00053c   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00053e   f005
000540   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000542   f004
000544   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000546   f003
000548   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00054a   f002
00054c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00054e   f001
000550   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000552   f000
000554   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000556   ffd9
000558   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_m600__read_data_reg	code
                                           _read_data_reg:
                                           ;	.line	80; ../src/m600.c	static uint16_t read_data_reg(void)
000cf2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000cf4   ffe5
000cf6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000cf8   ffd9
000cfa   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000cfc   ffe5
000cfe   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000d00   ffe5
000d02   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000d04   ffe5
000d06   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000d08   ffe5
                                           ;	.line	83; ../src/m600.c	(((unsigned int)M600_PORT_DATA_HIGH << 8) |
000d0a   cf80     movff	0xf80, 0           	MOVFF	_PORTA, r0x00
000d0c   f000
000d0e   6a01     clrf	0x1, 0              	CLRF	r0x01
000d10   5000     movf	0, 0, 0             	MOVF	r0x00, W
000d12   6e03     movwf	0x3, 0             	MOVWF	r0x03
000d14   6a02     clrf	0x2, 0              	CLRF	r0x02
000d16   cf81     movff	0xf81, 0           	MOVFF	_PORTB, r0x00
000d18   f000
000d1a   6a01     clrf	0x1, 0              	CLRF	r0x01
000d1c   5000     movf	0, 0, 0             	MOVF	r0x00, W
000d1e   1202     iorwf	0x2, 0x1, 0        	IORWF	r0x02, F
000d20   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000d22   1203     iorwf	0x3, 0x1, 0        	IORWF	r0x03, F
000d24   0e0f     movlw	0xf                	MOVLW	0x0f
000d26   1603     andwf	0x3, 0x1, 0        	ANDWF	r0x03, F
000d28   c003     movff	0x3, 0xff3         	MOVFF	r0x03, PRODL
000d2a   fff3
000d2c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000d2e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000d30   f003
000d32   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000d34   f002
000d36   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000d38   f001
000d3a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000d3c   f000
000d3e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000d40   ffd9
000d42   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_m600__m600_read_alarms	code
                                           _m600_read_alarms:
                                           ;	.line	60; ../src/m600.c	static m600_alarms_t m600_read_alarms(void)
000d88   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000d8a   ffe5
000d8c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000d8e   ffd9
000d90   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000d92   ffe5
000d94   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000d96   ffe5
                                           ;	.line	62; ../src/m600.c	m600_alarms_t alarms = M600_ALARM_NONE;
000d98   6a00     clrf	0, 0                	CLRF	r0x00
000d9a   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           ;	.line	70; ../src/m600.c	SET_ALARM_IF_ASSERTED(alarms, ERROR);
000d9c   a083     btfss	0x83, 0, 0         	BTFSS	_PORTDbits, 0
000d9e   d003     bra	0xda6                	BRA	_00111_DS_
000da0   0e01     movlw	0x1                	MOVLW	0x01
000da2   6e00     movwf	0, 0               	MOVWF	r0x00
000da4   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00111_DS_:
                                           ;	.line	71; ../src/m600.c	SET_ALARM_IF_ASSERTED(alarms, HOPPER_CHECK);
000da6   a283     btfss	0x83, 0x1, 0       	BTFSS	_PORTDbits, 1
000da8   d001     bra	0xdac                	BRA	_00119_DS_
000daa   8200     bsf	0, 0x1, 0            	BSF	r0x00, 1
                                           _00119_DS_:
                                           ;	.line	72; ../src/m600.c	SET_ALARM_IF_ASSERTED(alarms, MOTION_CHECK);
000dac   a483     btfss	0x83, 0x2, 0       	BTFSS	_PORTDbits, 2
000dae   d001     bra	0xdb2                	BRA	_00127_DS_
000db0   8400     bsf	0, 0x2, 0            	BSF	r0x00, 2
                                           _00127_DS_:
                                           ;	.line	74; ../src/m600.c	return alarms;
000db2   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000db4   fff3
000db6   5000     movf	0, 0, 0             	MOVF	r0x00, W
000db8   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000dba   f001
000dbc   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000dbe   f000
000dc0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000dc2   ffd9
000dc4   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  868 (0x0364) bytes ( 0.66%)
                                           ;           	  434 (0x01b2) words
                                           ; udata size:	  162 (0x00a2) bytes ( 9.04%)
                                           ; access size:	    7 (0x0007) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.8.5 #5516 (Sep 20 2009) (UNIX)
                                           ; This file was generated Sat Nov 21 16:31:00 2009
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4550
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _serial_setup
                                           	global _serial_sleep
                                           	global _serial_read
                                           	global _serial_pop_fifo
                                           	global _serial_write
                                           	global _serial_writei
                                           	global _serial_writeb
                                           	global _serial_handle_interrupt
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget1
                                           	extern __gptrput1
                                           	extern _SPPDATAbits
                                           	extern _SPPCFGbits
                                           	extern _SPPEPSbits
                                           	extern _SPPCONbits
                                           	extern _UFRMLbits
                                           	extern _UFRMHbits
                                           	extern _UIRbits
                                           	extern _UIEbits
                                           	extern _UEIRbits
                                           	extern _UEIEbits
                                           	extern _USTATbits
                                           	extern _UCONbits
                                           	extern _UADDRbits
                                           	extern _UCFGbits
                                           	extern _UEP0bits
                                           	extern _UEP1bits
                                           	extern _UEP2bits
                                           	extern _UEP3bits
                                           	extern _UEP4bits
                                           	extern _UEP5bits
                                           	extern _UEP6bits
                                           	extern _UEP7bits
                                           	extern _UEP8bits
                                           	extern _UEP9bits
                                           	extern _UEP10bits
                                           	extern _UEP11bits
                                           	extern _UEP12bits
                                           	extern _UEP13bits
                                           	extern _UEP14bits
                                           	extern _UEP15bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _TRISCbits
                                           	extern _TRISDbits
                                           	extern _TRISEbits
                                           	extern _OSCTUNEbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCONbits
                                           	extern _CCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSPCON2bits
                                           	extern _SSPCON1bits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _HLVDCONbits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _FSR2Hbits
                                           	extern _BSRbits
                                           	extern _FSR1Hbits
                                           	extern _FSR0Hbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _TBLPTRUbits
                                           	extern _PCLATHbits
                                           	extern _PCLATUbits
                                           	extern _STKPTRbits
                                           	extern _TOSUbits
                                           	extern _SPPDATA
                                           	extern _SPPCFG
                                           	extern _SPPEPS
                                           	extern _SPPCON
                                           	extern _UFRML
                                           	extern _UFRMH
                                           	extern _UIR
                                           	extern _UIE
                                           	extern _UEIR
                                           	extern _UEIE
                                           	extern _USTAT
                                           	extern _UCON
                                           	extern _UADDR
                                           	extern _UCFG
                                           	extern _UEP0
                                           	extern _UEP1
                                           	extern _UEP2
                                           	extern _UEP3
                                           	extern _UEP4
                                           	extern _UEP5
                                           	extern _UEP6
                                           	extern _UEP7
                                           	extern _UEP8
                                           	extern _UEP9
                                           	extern _UEP10
                                           	extern _UEP11
                                           	extern _UEP12
                                           	extern _UEP13
                                           	extern _UEP14
                                           	extern _UEP15
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _TRISC
                                           	extern _TRISD
                                           	extern _TRISE
                                           	extern _OSCTUNE
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _ECCP1DEL
                                           	extern _BAUDCON
                                           	extern _CCP2CON
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSPCON2
                                           	extern _SSPCON1
                                           	extern _SSPSTAT
                                           	extern _SSPADD
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _HLVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _osc_set_power
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           
                                           udata_serial_0	udata
                                           _gfifo	res	9
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_serial__serial_handle_interrupt	code
                                           _serial_handle_interrupt:
                                           ;	.line	253; ../src/serial.c	void serial_handle_interrupt(void)
0009b2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0009b4   ffe5
0009b6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0009b8   ffd9
0009ba   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0009bc   ffe5
0009be   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0009c0   ffe5
0009c2   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0009c4   ffe5
                                           ;	.line	255; ../src/serial.c	if (!PIR1bits.RCIF)
0009c6   ba9e     btfsc	0x9e, 0x5, 0       	BTFSC	_PIR1bits, 5
0009c8   d001     bra	0x9cc                	BRA	_00214_DS_
                                           ;	.line	256; ../src/serial.c	return ;
0009ca   d02b     bra	0xa22                	BRA	_00224_DS_
                                           _00214_DS_:
                                           ;	.line	258; ../src/serial.c	if (RCSTAbits.OERR)
0009cc   a2ab     btfss	0xab, 0x1, 0       	BTFSS	_RCSTAbits, 1
0009ce   d004     bra	0x9d8                	BRA	_00222_DS_
                                           	;	VOLATILE READ - BEGIN
0009d0   50ae     movf	0xae, 0, 0          	MOVF	_RCREG, W
                                           	;	VOLATILE READ - END
0009d2   0102     movlb	0x2                	BANKSEL	_gfifo
                                           ;	.line	264; ../src/serial.c	gfifo.error = 1;
0009d4   8d22     bsf	0x22, 0x6, 0x1       	BSF	_gfifo, 6, B
0009d6   d024     bra	0xa20                	BRA	_00223_DS_
                                           _00222_DS_:
                                           ;	.line	266; ../src/serial.c	else if (RCSTAbits.FERR)
0009d8   a4ab     btfss	0xab, 0x2, 0       	BTFSS	_RCSTAbits, 2
0009da   d005     bra	0x9e6                	BRA	_00219_DS_
                                           ;	.line	268; ../src/serial.c	RCSTAbits.CREN = 0;
0009dc   98ab     bcf	0xab, 0x4, 0         	BCF	_RCSTAbits, 4
                                           ;	.line	269; ../src/serial.c	RCSTAbits.CREN = 1;
0009de   88ab     bsf	0xab, 0x4, 0         	BSF	_RCSTAbits, 4
0009e0   0102     movlb	0x2                	BANKSEL	_gfifo
                                           ;	.line	271; ../src/serial.c	gfifo.error = 1;
0009e2   8d22     bsf	0x22, 0x6, 0x1       	BSF	_gfifo, 6, B
0009e4   d01d     bra	0xa20                	BRA	_00223_DS_
                                           _00219_DS_:
0009e6   0102     movlb	0x2                	BANKSEL	_gfifo
                                           ;	.line	275; ../src/serial.c	if (gfifo.size < sizeof(gfifo.buffer))
0009e8   5122     movf	0x22, 0, 0x1        	MOVF	_gfifo, W, B
0009ea   0b0f     andlw	0xf                	ANDLW	0x0f
0009ec   6e00     movwf	0, 0               	MOVWF	r0x00
0009ee   5000     movf	0, 0, 0             	MOVF	r0x00, W
0009f0   0f80     addlw	0x80               	ADDLW	0x80
0009f2   0f78     addlw	0x78               	ADDLW	0x78
0009f4   e213     bc	0xa1c                 	BC	_00216_DS_
                                           ;	.line	276; ../src/serial.c	fifo_push(&gfifo, RCREG);
0009f6   0e02     movlw	0x2                	MOVLW	HIGH(_gfifo)
0009f8   6e01     movwf	0x1, 0             	MOVWF	r0x01
0009fa   0e22     movlw	0x22               	MOVLW	LOW(_gfifo)
0009fc   6e00     movwf	0, 0               	MOVWF	r0x00
0009fe   0e80     movlw	0x80               	MOVLW	0x80
000a00   6e02     movwf	0x2, 0             	MOVWF	r0x02
000a02   50ae     movf	0xae, 0, 0          	MOVF	_RCREG, W
000a04   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a06   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000a08   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a0a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000a0c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a0e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000a10   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a12   ec6d     call	0x2da, 0            	CALL	_fifo_push
000a14   f001
000a16   0e04     movlw	0x4                	MOVLW	0x04
000a18   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000a1a   d002     bra	0xa20                	BRA	_00223_DS_
                                           _00216_DS_:
000a1c   0102     movlb	0x2                	BANKSEL	_gfifo
                                           ;	.line	278; ../src/serial.c	gfifo.overflow = 1;
000a1e   8f22     bsf	0x22, 0x7, 0x1       	BSF	_gfifo, 7, B
                                           _00223_DS_:
                                           ;	.line	281; ../src/serial.c	PIR1bits.RCIF = 0;
000a20   9a9e     bcf	0x9e, 0x5, 0         	BCF	_PIR1bits, 5
                                           _00224_DS_:
000a22   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000a24   f002
000a26   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000a28   f001
000a2a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000a2c   f000
000a2e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000a30   ffd9
000a32   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_serial__serial_writeb	code
                                           _serial_writeb:
                                           ;	.line	247; ../src/serial.c	void serial_writeb(unsigned char b)
000e58   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000e5a   ffe5
000e5c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000e5e   ffd9
000e60   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000e62   ffe5
000e64   0e02     movlw	0x2                	MOVLW	0x02
000e66   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000e68   f000
                                           ;	.line	249; ../src/serial.c	write_byte(b);
000e6a   5000     movf	0, 0, 0             	MOVF	r0x00, W
000e6c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e6e   ec73     call	0xee6, 0            	CALL	_write_byte
000e70   f007
000e72   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000e74   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000e76   f000
000e78   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000e7a   ffd9
000e7c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_serial__serial_writei	code
                                           _serial_writei:
                                           ;	.line	239; ../src/serial.c	void serial_writei(unsigned int i)
000b88   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000b8a   ffe5
000b8c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000b8e   ffd9
000b90   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000b92   ffe5
000b94   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000b96   ffe5
000b98   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000b9a   ffe5
000b9c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000b9e   ffe5
000ba0   0e02     movlw	0x2                	MOVLW	0x02
000ba2   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000ba4   f000
000ba6   0e03     movlw	0x3                	MOVLW	0x03
000ba8   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
000baa   f001
                                           ;	.line	242; ../src/serial.c	write_byte(MASK_BYTE(i, 0));
000bac   c001     movff	0x1, 0x3           	MOVFF	r0x01, r0x03
000bae   f003
000bb0   c000     movff	0, 0x2             	MOVFF	r0x00, r0x02
000bb2   f002
000bb4   6a03     clrf	0x3, 0              	CLRF	r0x03
000bb6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000bb8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bba   ec73     call	0xee6, 0            	CALL	_write_byte
000bbc   f007
000bbe   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	243; ../src/serial.c	write_byte(MASK_BYTE(i, 1));
000bc0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000bc2   6e00     movwf	0, 0               	MOVWF	r0x00
000bc4   6a01     clrf	0x1, 0              	CLRF	r0x01
000bc6   6a01     clrf	0x1, 0              	CLRF	r0x01
000bc8   5000     movf	0, 0, 0             	MOVF	r0x00, W
000bca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000bcc   ec73     call	0xee6, 0            	CALL	_write_byte
000bce   f007
000bd0   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000bd2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000bd4   f003
000bd6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000bd8   f002
000bda   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000bdc   f001
000bde   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000be0   f000
000be2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000be4   ffd9
000be6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_serial__serial_write	code
                                           _serial_write:
                                           ;	.line	230; ../src/serial.c	void serial_write(unsigned char* s, unsigned int len)
0007b2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0007b4   ffe5
0007b6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0007b8   ffd9
0007ba   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0007bc   ffe5
0007be   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0007c0   ffe5
0007c2   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0007c4   ffe5
0007c6   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0007c8   ffe5
0007ca   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0007cc   ffe5
0007ce   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0007d0   ffe5
0007d2   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0007d4   ffe5
0007d6   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0007d8   ffe5
0007da   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0007dc   ffe5
0007de   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0007e0   ffe5
0007e2   0e02     movlw	0x2                	MOVLW	0x02
0007e4   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0007e6   f000
0007e8   0e03     movlw	0x3                	MOVLW	0x03
0007ea   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0007ec   f001
0007ee   0e04     movlw	0x4                	MOVLW	0x04
0007f0   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0007f2   f002
0007f4   0e05     movlw	0x5                	MOVLW	0x05
0007f6   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0007f8   f003
0007fa   0e06     movlw	0x6                	MOVLW	0x06
0007fc   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0007fe   f004
                                           ;	.line	234; ../src/serial.c	for (i = 0; i < len; ++i)
000800   6a05     clrf	0x5, 0              	CLRF	r0x05
000802   6a06     clrf	0x6, 0              	CLRF	r0x06
                                           _00189_DS_:
000804   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000806   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
000808   e102     bnz	0x80e                	BNZ	_00198_DS_
00080a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00080c   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
                                           _00198_DS_:
00080e   e21a     bc	0x844                 	BC	_00193_DS_
                                           ;	.line	235; ../src/serial.c	write_byte(s[i]);
000810   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000812   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
000814   6e07     movwf	0x7, 0             	MOVWF	r0x07
000816   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000818   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00081a   6e08     movwf	0x8, 0             	MOVWF	r0x08
00081c   6ae8     clrf	0xe8, 0             	CLRF	WREG
00081e   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
000820   6e09     movwf	0x9, 0             	MOVWF	r0x09
000822   c007     movff	0x7, 0xfe9         	MOVFF	r0x07, FSR0L
000824   ffe9
000826   c008     movff	0x8, 0xff3         	MOVFF	r0x08, PRODL
000828   fff3
00082a   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
00082c   ec62     call	0xec4, 0            	CALL	__gptrget1
00082e   f007
000830   6e07     movwf	0x7, 0             	MOVWF	r0x07
000832   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000834   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000836   ec73     call	0xee6, 0            	CALL	_write_byte
000838   f007
00083a   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	234; ../src/serial.c	for (i = 0; i < len; ++i)
00083c   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
00083e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000840   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
000842   d7e0     bra	0x804                	BRA	_00189_DS_
                                           _00193_DS_:
000844   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
000846   f009
000848   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
00084a   f008
00084c   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00084e   f007
000850   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000852   f006
000854   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000856   f005
000858   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00085a   f004
00085c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00085e   f003
000860   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000862   f002
000864   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000866   f001
000868   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00086a   f000
00086c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00086e   ffd9
000870   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_serial__serial_pop_fifo	code
                                           _serial_pop_fifo:
                                           ;	.line	212; ../src/serial.c	int serial_pop_fifo(unsigned char* c)
0001ea   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0001ec   ffe5
0001ee   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0001f0   ffd9
0001f2   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0001f4   ffe5
0001f6   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0001f8   ffe5
0001fa   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0001fc   ffe5
0001fe   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000200   ffe5
000202   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000204   ffe5
000206   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000208   ffe5
00020a   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00020c   ffe5
00020e   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000210   ffe5
000212   0e02     movlw	0x2                	MOVLW	0x02
000214   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000216   f000
000218   0e03     movlw	0x3                	MOVLW	0x03
00021a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00021c   f001
00021e   0e04     movlw	0x4                	MOVLW	0x04
000220   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
000222   f002
                                           ;	.line	214; ../src/serial.c	int res = -1;
000224   0eff     movlw	0xff               	MOVLW	0xff
000226   6e03     movwf	0x3, 0             	MOVWF	r0x03
000228   6e04     movwf	0x4, 0             	MOVWF	r0x04
                                           ;	.line	216; ../src/serial.c	fifo_lock(&gfifo);
00022a   0e02     movlw	0x2                	MOVLW	HIGH(_gfifo)
00022c   6e06     movwf	0x6, 0             	MOVWF	r0x06
00022e   0e22     movlw	0x22               	MOVLW	LOW(_gfifo)
000230   6e05     movwf	0x5, 0             	MOVWF	r0x05
000232   0e80     movlw	0x80               	MOVLW	0x80
000234   6e07     movwf	0x7, 0             	MOVWF	r0x07
000236   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000238   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00023a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00023c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00023e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000240   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000242   ecad     call	0x55a, 0            	CALL	_fifo_lock
000244   f002
000246   0e03     movlw	0x3                	MOVLW	0x03
000248   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00024a   0102     movlb	0x2                	BANKSEL	_gfifo
                                           ;	.line	218; ../src/serial.c	if (gfifo.size)
00024c   5122     movf	0x22, 0, 0x1        	MOVF	_gfifo, W, B
00024e   0b0f     andlw	0xf                	ANDLW	0x0f
000250   6e05     movwf	0x5, 0             	MOVWF	r0x05
000252   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000254   e01c     bz	0x28e                 	BZ	_00183_DS_
                                           ;	.line	220; ../src/serial.c	*c = fifo_pop(&gfifo);
000256   0e02     movlw	0x2                	MOVLW	HIGH(_gfifo)
000258   6e06     movwf	0x6, 0             	MOVWF	r0x06
00025a   0e22     movlw	0x22               	MOVLW	LOW(_gfifo)
00025c   6e05     movwf	0x5, 0             	MOVWF	r0x05
00025e   0e80     movlw	0x80               	MOVLW	0x80
000260   6e07     movwf	0x7, 0             	MOVWF	r0x07
000262   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000264   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000266   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000268   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00026a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00026c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00026e   ecdb     call	0x3b6, 0            	CALL	_fifo_pop
000270   f001
000272   6e05     movwf	0x5, 0             	MOVWF	r0x05
000274   0e03     movlw	0x3                	MOVLW	0x03
000276   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000278   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00027a   ffe5
00027c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00027e   ffe9
000280   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000282   fff3
000284   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000286   ecbc     call	0xf78, 0            	CALL	__gptrput1
000288   f007
                                           ;	.line	221; ../src/serial.c	res = 0;
00028a   6a03     clrf	0x3, 0              	CLRF	r0x03
00028c   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00183_DS_:
                                           ;	.line	224; ../src/serial.c	fifo_unlock(&gfifo);
00028e   0e02     movlw	0x2                	MOVLW	HIGH(_gfifo)
000290   6e01     movwf	0x1, 0             	MOVWF	r0x01
000292   0e22     movlw	0x22               	MOVLW	LOW(_gfifo)
000294   6e00     movwf	0, 0               	MOVWF	r0x00
000296   0e80     movlw	0x80               	MOVLW	0x80
000298   6e02     movwf	0x2, 0             	MOVWF	r0x02
00029a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00029c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00029e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0002a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002a2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0002a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002a6   ec39     call	0x872, 0            	CALL	_fifo_unlock
0002a8   f004
0002aa   0e03     movlw	0x3                	MOVLW	0x03
0002ac   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	226; ../src/serial.c	return res;
0002ae   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0002b0   fff3
0002b2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0002b4   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0002b6   f007
0002b8   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0002ba   f006
0002bc   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0002be   f005
0002c0   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0002c2   f004
0002c4   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0002c6   f003
0002c8   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0002ca   f002
0002cc   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0002ce   f001
0002d0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0002d2   f000
0002d4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0002d6   ffd9
0002d8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_serial__serial_read	code
                                           _serial_read:
                                           ;	.line	204; ../src/serial.c	void serial_read(unsigned char* s, unsigned char len)
000c9a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000c9c   ffe5
000c9e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000ca0   ffd9
000ca2   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000ca4   ffe5
000ca6   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000ca8   ffe5
000caa   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000cac   ffe5
000cae   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000cb0   ffe5
000cb2   0e02     movlw	0x2                	MOVLW	0x02
000cb4   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000cb6   f000
000cb8   0e03     movlw	0x3                	MOVLW	0x03
000cba   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
000cbc   f001
000cbe   0e04     movlw	0x4                	MOVLW	0x04
000cc0   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
000cc2   f002
                                           ;	.line	208; ../src/serial.c	*s = peek_byte();
000cc4   ec51     call	0xea2, 0            	CALL	_peek_byte
000cc6   f007
000cc8   6e03     movwf	0x3, 0             	MOVWF	r0x03
000cca   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000ccc   ffe5
000cce   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000cd0   ffe9
000cd2   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000cd4   fff3
000cd6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000cd8   ecbc     call	0xf78, 0            	CALL	__gptrput1
000cda   f007
000cdc   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000cde   f003
000ce0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000ce2   f002
000ce4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000ce6   f001
000ce8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000cea   f000
000cec   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000cee   ffd9
000cf0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_serial__serial_sleep	code
                                           _serial_sleep:
                                           ;	.line	191; ../src/serial.c	void serial_sleep(void)
000f04   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000f06   ffe5
000f08   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000f0a   ffd9
                                           ;	.line	195; ../src/serial.c	osc_set_power(OSC_PMODE_PRI_IDLE);
000f0c   0e04     movlw	0x4                	MOVLW	0x04
000f0e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f10   ec1a     call	0xa34, 0            	CALL	_osc_set_power
000f12   f005
000f14   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00170_DS_:
000f16   0003     sleep                    	sleep 
000f18   d7fe     bra	0xf16                	BRA	_00170_DS_
000f1a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000f1c   ffd9
000f1e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_serial__serial_setup	code
                                           _serial_setup:
                                           ;	.line	156; ../src/serial.c	void serial_setup(void)
000b22   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000b24   ffe5
000b26   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000b28   ffd9
000b2a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000b2c   ffe5
000b2e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000b30   ffe5
000b32   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000b34   ffe5
                                           ;	.line	158; ../src/serial.c	fifo_init(&gfifo);
000b36   0e02     movlw	0x2                	MOVLW	HIGH(_gfifo)
000b38   6e01     movwf	0x1, 0             	MOVWF	r0x01
000b3a   0e22     movlw	0x22               	MOVLW	LOW(_gfifo)
000b3c   6e00     movwf	0, 0               	MOVWF	r0x00
000b3e   0e80     movlw	0x80               	MOVLW	0x80
000b40   6e02     movwf	0x2, 0             	MOVWF	r0x02
000b42   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000b44   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b46   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000b48   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b4a   5000     movf	0, 0, 0             	MOVF	r0x00, W
000b4c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b4e   ec12     call	0x624, 0            	CALL	_fifo_init
000b50   f003
000b52   0e03     movlw	0x3                	MOVLW	0x03
000b54   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	160; ../src/serial.c	SERIAL_TX_TRIS = 0;
000b56   9c94     bcf	0x94, 0x6, 0         	BCF	_TRISCbits, 6
                                           ;	.line	161; ../src/serial.c	SERIAL_RX_TRIS = 1;
000b58   8e94     bsf	0x94, 0x7, 0         	BSF	_TRISCbits, 7
                                           ;	.line	166; ../src/serial.c	TXSTA = 0;
000b5a   6aac     clrf	0xac, 0             	CLRF	_TXSTA
                                           ;	.line	167; ../src/serial.c	TXSTAbits.TXEN = 1;
000b5c   8aac     bsf	0xac, 0x5, 0         	BSF	_TXSTAbits, 5
                                           ;	.line	169; ../src/serial.c	RCSTA = 0;
000b5e   6aab     clrf	0xab, 0             	CLRF	_RCSTA
                                           ;	.line	170; ../src/serial.c	RCSTAbits.SPEN = 1;
000b60   8eab     bsf	0xab, 0x7, 0         	BSF	_RCSTAbits, 7
                                           ;	.line	171; ../src/serial.c	RCSTAbits.CREN = 1;
000b62   88ab     bsf	0xab, 0x4, 0         	BSF	_RCSTAbits, 4
                                           ;	.line	176; ../src/serial.c	PIR1bits.RCIF = 0;
000b64   9a9e     bcf	0x9e, 0x5, 0         	BCF	_PIR1bits, 5
                                           ;	.line	177; ../src/serial.c	PIR1bits.TXIF = 0;
000b66   989e     bcf	0x9e, 0x4, 0         	BCF	_PIR1bits, 4
                                           ;	.line	178; ../src/serial.c	PIE1bits.RCIE = 1;
000b68   8a9d     bsf	0x9d, 0x5, 0         	BSF	_PIE1bits, 5
                                           ;	.line	179; ../src/serial.c	PIE1bits.TXIE = 0;
000b6a   989d     bcf	0x9d, 0x4, 0         	BCF	_PIE1bits, 4
                                           ;	.line	184; ../src/serial.c	SPBRG = 12;
000b6c   0e0c     movlw	0xc                	MOVLW	0x0c
000b6e   6eaf     movwf	0xaf, 0            	MOVWF	_SPBRG
                                           ;	.line	185; ../src/serial.c	TXSTA = 0x20;
000b70   0e20     movlw	0x20               	MOVLW	0x20
000b72   6eac     movwf	0xac, 0            	MOVWF	_TXSTA
                                           ;	.line	187; ../src/serial.c	BAUDCON = 0x00;
000b74   6ab8     clrf	0xb8, 0             	CLRF	_BAUDCON
000b76   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000b78   f002
000b7a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000b7c   f001
000b7e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000b80   f000
000b82   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000b84   ffd9
000b86   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_serial__read_byte	code
                                           _read_byte:
                                           ;	.line	126; ../src/serial.c	static unsigned char read_byte(void)
0006ec   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0006ee   ffe5
0006f0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0006f2   ffd9
0006f4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0006f6   ffe5
0006f8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0006fa   ffe5
0006fc   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0006fe   ffe5
000700   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000702   ffe5
000704   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000706   ffe5
                                           ;	.line	128; ../src/serial.c	unsigned char has_read = 0;
000708   6a00     clrf	0, 0                	CLRF	r0x00
                                           ;	.line	129; ../src/serial.c	unsigned char c = 0;
00070a   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00156_DS_:
                                           ;	.line	131; ../src/serial.c	while (!has_read)
00070c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00070e   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
000710   d042     bra	0x796                	BRA	_00158_DS_
                                           ;	.line	133; ../src/serial.c	int_wait();
000712   ecb2     call	0xf64, 0            	CALL	_int_wait
000714   f007
                                           ;	.line	135; ../src/serial.c	fifo_lock(&gfifo);
000716   0e02     movlw	0x2                	MOVLW	HIGH(_gfifo)
000718   6e03     movwf	0x3, 0             	MOVWF	r0x03
00071a   0e22     movlw	0x22               	MOVLW	LOW(_gfifo)
00071c   6e02     movwf	0x2, 0             	MOVWF	r0x02
00071e   0e80     movlw	0x80               	MOVLW	0x80
000720   6e04     movwf	0x4, 0             	MOVWF	r0x04
000722   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000724   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000726   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000728   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00072a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00072c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00072e   ecad     call	0x55a, 0            	CALL	_fifo_lock
000730   f002
000732   0e03     movlw	0x3                	MOVLW	0x03
000734   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000736   0102     movlb	0x2                	BANKSEL	_gfifo
                                           ;	.line	137; ../src/serial.c	if (gfifo.size)
000738   5122     movf	0x22, 0, 0x1        	MOVF	_gfifo, W, B
00073a   0b0f     andlw	0xf                	ANDLW	0x0f
00073c   6e02     movwf	0x2, 0             	MOVWF	r0x02
00073e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000740   e014     bz	0x76a                 	BZ	_00154_DS_
                                           ;	.line	139; ../src/serial.c	c = fifo_pop(&gfifo);
000742   0e02     movlw	0x2                	MOVLW	HIGH(_gfifo)
000744   6e03     movwf	0x3, 0             	MOVWF	r0x03
000746   0e22     movlw	0x22               	MOVLW	LOW(_gfifo)
000748   6e02     movwf	0x2, 0             	MOVWF	r0x02
00074a   0e80     movlw	0x80               	MOVLW	0x80
00074c   6e04     movwf	0x4, 0             	MOVWF	r0x04
00074e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000750   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000752   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000754   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000756   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000758   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00075a   ecdb     call	0x3b6, 0            	CALL	_fifo_pop
00075c   f001
00075e   6e01     movwf	0x1, 0             	MOVWF	r0x01
000760   0e03     movlw	0x3                	MOVLW	0x03
000762   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	140; ../src/serial.c	has_read = 1;
000764   0e01     movlw	0x1                	MOVLW	0x01
000766   6e00     movwf	0, 0               	MOVWF	r0x00
000768   d005     bra	0x774                	BRA	_00155_DS_
                                           _00154_DS_:
00076a   0102     movlb	0x2                	BANKSEL	_gfifo
                                           ;	.line	142; ../src/serial.c	else if (gfifo.error)
00076c   ad22     btfss	0x22, 0x6, 0x1     	BTFSS	_gfifo, 6, B
00076e   d002     bra	0x774                	BRA	_00155_DS_
                                           ;	.line	144; ../src/serial.c	has_read = 1;
000770   0e01     movlw	0x1                	MOVLW	0x01
000772   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00155_DS_:
                                           ;	.line	147; ../src/serial.c	fifo_unlock(&gfifo);
000774   0e02     movlw	0x2                	MOVLW	HIGH(_gfifo)
000776   6e03     movwf	0x3, 0             	MOVWF	r0x03
000778   0e22     movlw	0x22               	MOVLW	LOW(_gfifo)
00077a   6e02     movwf	0x2, 0             	MOVWF	r0x02
00077c   0e80     movlw	0x80               	MOVLW	0x80
00077e   6e04     movwf	0x4, 0             	MOVWF	r0x04
000780   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000782   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000784   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000786   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000788   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00078a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00078c   ec39     call	0x872, 0            	CALL	_fifo_unlock
00078e   f004
000790   0e03     movlw	0x3                	MOVLW	0x03
000792   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000794   d7bb     bra	0x70c                	BRA	_00156_DS_
                                           _00158_DS_:
                                           ;	.line	150; ../src/serial.c	return c;
000796   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000798   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00079a   f004
00079c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00079e   f003
0007a0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0007a2   f002
0007a4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0007a6   f001
0007a8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0007aa   f000
0007ac   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0007ae   ffd9
0007b0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_serial__int_wait	code
                                           _int_wait:
                                           ;	.line	117; ../src/serial.c	static void int_wait(void)
000f64   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000f66   ffe5
000f68   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000f6a   ffd9
                                           ;	.line	119; ../src/serial.c	INTCONbits.PEIE = 1;
000f6c   8cf2     bsf	0xf2, 0x6, 0         	BSF	_INTCONbits, 6
                                           ;	.line	120; ../src/serial.c	INTCONbits.GIE = 1;
000f6e   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
000f70   0003     sleep                    	SLEEP 
000f72   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000f74   ffd9
000f76   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_serial__peek_byte	code
                                           _peek_byte:
                                           ;	.line	102; ../src/serial.c	static unsigned char peek_byte(void)
000ea2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000ea4   ffe5
000ea6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000ea8   ffd9
000eaa   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000eac   ffe5
                                           _00138_DS_:
                                           ;	.line	106; ../src/serial.c	while (!PIR1bits.RCIF)
000eae   aa9e     btfss	0x9e, 0x5, 0       	BTFSS	_PIR1bits, 5
000eb0   d7fe     bra	0xeae                	BRA	_00138_DS_
                                           ;	.line	109; ../src/serial.c	c = RCREG;
000eb2   cfae     movff	0xfae, 0           	MOVFF	_RCREG, r0x00
000eb4   f000
                                           ;	.line	111; ../src/serial.c	PIR1bits.RCIF = 0;
000eb6   9a9e     bcf	0x9e, 0x5, 0         	BCF	_PIR1bits, 5
                                           ;	.line	113; ../src/serial.c	return c;
000eb8   5000     movf	0, 0, 0             	MOVF	r0x00, W
000eba   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000ebc   f000
000ebe   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000ec0   ffd9
000ec2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_serial__write_byte	code
                                           _write_byte:
                                           ;	.line	81; ../src/serial.c	static void write_byte(unsigned char c)
000ee6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000ee8   ffe5
000eea   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000eec   ffd9
000eee   0e02     movlw	0x2                	MOVLW	0x02
000ef0   cfdb     movff	0xfdb, 0xfad       	MOVFF	PLUSW2, _TXREG
000ef2   ffad
000ef4   0000     nop                      	NOP 
000ef6   0000     nop                      	NOP 
000ef8   0000     nop                      	NOP 
                                           _00130_DS_:
                                           ;	.line	95; ../src/serial.c	while (!PIR1bits.TXIF)
000efa   a89e     btfss	0x9e, 0x4, 0       	BTFSS	_PIR1bits, 4
000efc   d7fe     bra	0xefa                	BRA	_00130_DS_
000efe   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000f00   ffd9
000f02   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_serial__fifo_unlock	code
                                           _fifo_unlock:
                                           ;	.line	64; ../src/serial.c	static void fifo_unlock(struct fifo* f)
000872   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000874   ffe5
000876   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000878   ffd9
00087a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00087c   ffe5
00087e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000880   ffe5
000882   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000884   ffe5
000886   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000888   ffe5
00088a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00088c   ffe5
00088e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000890   ffe5
000892   0e02     movlw	0x2                	MOVLW	0x02
000894   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000896   f000
000898   0e03     movlw	0x3                	MOVLW	0x03
00089a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00089c   f001
00089e   0e04     movlw	0x4                	MOVLW	0x04
0008a0   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0008a2   f002
                                           ;	.line	66; ../src/serial.c	INTCONbits.PEIE = f->peie;
0008a4   c000     movff	0, 0x3             	MOVFF	r0x00, r0x03
0008a6   f003
0008a8   c001     movff	0x1, 0x4           	MOVFF	r0x01, r0x04
0008aa   f004
0008ac   c002     movff	0x2, 0x5           	MOVFF	r0x02, r0x05
0008ae   f005
0008b0   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0008b2   ffe9
0008b4   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0008b6   fff3
0008b8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0008ba   ec62     call	0xec4, 0            	CALL	__gptrget1
0008bc   f007
0008be   38e8     swapf	0xe8, 0, 0         	SWAPF	WREG, W
0008c0   40e8     rrncf	0xe8, 0, 0         	RRNCF	WREG, W
0008c2   0b01     andlw	0x1                	ANDLW	0x01
0008c4   6e03     movwf	0x3, 0             	MOVWF	r0x03
0008c6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0008c8   0b01     andlw	0x1                	ANDLW	0x01
0008ca   40e8     rrncf	0xe8, 0, 0         	RRNCF	WREG, W
0008cc   40e8     rrncf	0xe8, 0, 0         	RRNCF	WREG, W
0008ce   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
0008d0   50f2     movf	0xf2, 0, 0          	MOVF	_INTCONbits, W
0008d2   0bbf     andlw	0xbf               	ANDLW	0xbf
0008d4   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
0008d6   6ef2     movwf	0xf2, 0            	MOVWF	_INTCONbits
                                           ;	.line	67; ../src/serial.c	INTCONbits.GIE = f->gie;
0008d8   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0008da   ffe9
0008dc   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0008de   fff3
0008e0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0008e2   ec62     call	0xec4, 0            	CALL	__gptrget1
0008e4   f007
0008e6   38e8     swapf	0xe8, 0, 0         	SWAPF	WREG, W
0008e8   0b01     andlw	0x1                	ANDLW	0x01
0008ea   6e00     movwf	0, 0               	MOVWF	r0x00
0008ec   5000     movf	0, 0, 0             	MOVF	r0x00, W
0008ee   0b01     andlw	0x1                	ANDLW	0x01
0008f0   40e8     rrncf	0xe8, 0, 0         	RRNCF	WREG, W
0008f2   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
0008f4   50f2     movf	0xf2, 0, 0          	MOVF	_INTCONbits, W
0008f6   0b7f     andlw	0x7f               	ANDLW	0x7f
0008f8   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
0008fa   6ef2     movwf	0xf2, 0            	MOVWF	_INTCONbits
0008fc   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0008fe   f005
000900   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000902   f004
000904   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000906   f003
000908   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00090a   f002
00090c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00090e   f001
000910   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000912   f000
000914   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000916   ffd9
000918   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_serial__fifo_lock	code
                                           _fifo_lock:
                                           ;	.line	54; ../src/serial.c	static void fifo_lock(struct fifo* f)
00055a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00055c   ffe5
00055e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000560   ffd9
000562   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000564   ffe5
000566   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000568   ffe5
00056a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00056c   ffe5
00056e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000570   ffe5
000572   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000574   ffe5
000576   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000578   ffe5
00057a   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00057c   ffe5
00057e   0e02     movlw	0x2                	MOVLW	0x02
000580   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000582   f000
000584   0e03     movlw	0x3                	MOVLW	0x03
000586   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
000588   f001
00058a   0e04     movlw	0x4                	MOVLW	0x04
00058c   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00058e   f002
                                           ;	.line	56; ../src/serial.c	f->gie = INTCONbits.GIE;
000590   c000     movff	0, 0x3             	MOVFF	r0x00, r0x03
000592   f003
000594   c001     movff	0x1, 0x4           	MOVFF	r0x01, r0x04
000596   f004
000598   c002     movff	0x2, 0x5           	MOVFF	r0x02, r0x05
00059a   f005
00059c   6a06     clrf	0x6, 0              	CLRF	r0x06
00059e   bef2     btfsc	0xf2, 0x7, 0       	BTFSC	_INTCONbits, 7
0005a0   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
0005a2   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0005a4   0b01     andlw	0x1                	ANDLW	0x01
0005a6   38e8     swapf	0xe8, 0, 0         	SWAPF	WREG, W
0005a8   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
0005aa   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0005ac   ffe9
0005ae   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0005b0   fff3
0005b2   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0005b4   ec62     call	0xec4, 0            	CALL	__gptrget1
0005b6   f007
0005b8   0bef     andlw	0xef               	ANDLW	0xef
0005ba   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
0005bc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005be   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0005c0   ffe9
0005c2   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0005c4   fff3
0005c6   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0005c8   ecbc     call	0xf78, 0            	CALL	__gptrput1
0005ca   f007
                                           ;	.line	57; ../src/serial.c	f->peie = INTCONbits.PEIE;
0005cc   6a03     clrf	0x3, 0              	CLRF	r0x03
0005ce   bcf2     btfsc	0xf2, 0x6, 0       	BTFSC	_INTCONbits, 6
0005d0   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
0005d2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0005d4   0b01     andlw	0x1                	ANDLW	0x01
0005d6   38e8     swapf	0xe8, 0, 0         	SWAPF	WREG, W
0005d8   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
0005da   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
0005dc   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0005de   ffe9
0005e0   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0005e2   fff3
0005e4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0005e6   ec62     call	0xec4, 0            	CALL	__gptrget1
0005e8   f007
0005ea   0bdf     andlw	0xdf               	ANDLW	0xdf
0005ec   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
0005ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0005f0   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0005f2   ffe9
0005f4   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0005f6   fff3
0005f8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0005fa   ecbc     call	0xf78, 0            	CALL	__gptrput1
0005fc   f007
                                           ;	.line	59; ../src/serial.c	INTCONbits.GIE = 0;
0005fe   9ef2     bcf	0xf2, 0x7, 0         	BCF	_INTCONbits, 7
                                           ;	.line	60; ../src/serial.c	INTCONbits.PEIE = 0;
000600   9cf2     bcf	0xf2, 0x6, 0         	BCF	_INTCONbits, 6
000602   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000604   f006
000606   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000608   f005
00060a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00060c   f004
00060e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000610   f003
000612   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000614   f002
000616   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000618   f001
00061a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00061c   f000
00061e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000620   ffd9
000622   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_serial__fifo_push	code
                                           _fifo_push:
                                           ;	.line	48; ../src/serial.c	static void fifo_push(struct fifo* f, unsigned char c)
0002da   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0002dc   ffe5
0002de   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0002e0   ffd9
0002e2   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0002e4   ffe5
0002e6   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0002e8   ffe5
0002ea   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0002ec   ffe5
0002ee   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0002f0   ffe5
0002f2   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0002f4   ffe5
0002f6   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0002f8   ffe5
0002fa   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0002fc   ffe5
0002fe   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000300   ffe5
000302   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000304   ffe5
000306   0e02     movlw	0x2                	MOVLW	0x02
000308   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00030a   f000
00030c   0e03     movlw	0x3                	MOVLW	0x03
00030e   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
000310   f001
000312   0e04     movlw	0x4                	MOVLW	0x04
000314   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
000316   f002
000318   0e05     movlw	0x5                	MOVLW	0x05
00031a   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00031c   f003
                                           ;	.line	50; ../src/serial.c	f->buffer[f->size++] = c;
00031e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000320   0f01     addlw	0x1                	ADDLW	0x01
000322   6e04     movwf	0x4, 0             	MOVWF	r0x04
000324   0e00     movlw	0                  	MOVLW	0x00
000326   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
000328   6e05     movwf	0x5, 0             	MOVWF	r0x05
00032a   0e00     movlw	0                  	MOVLW	0x00
00032c   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
00032e   6e06     movwf	0x6, 0             	MOVWF	r0x06
000330   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000332   ffe9
000334   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000336   fff3
000338   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00033a   ec62     call	0xec4, 0            	CALL	__gptrget1
00033c   f007
00033e   0b0f     andlw	0xf                	ANDLW	0x0f
000340   6e07     movwf	0x7, 0             	MOVWF	r0x07
000342   2807     incf	0x7, 0, 0           	INCF	r0x07, W
000344   6e08     movwf	0x8, 0             	MOVWF	r0x08
000346   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000348   0b0f     andlw	0xf                	ANDLW	0x0f
00034a   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
00034c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00034e   ffe9
000350   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000352   fff3
000354   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000356   ec62     call	0xec4, 0            	CALL	__gptrget1
000358   f007
00035a   0bf0     andlw	0xf0               	ANDLW	0xf0
00035c   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
00035e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000360   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000362   ffe9
000364   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000366   fff3
000368   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00036a   ecbc     call	0xf78, 0            	CALL	__gptrput1
00036c   f007
00036e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000370   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
000372   6ae8     clrf	0xe8, 0             	CLRF	WREG
000374   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
000376   6ae8     clrf	0xe8, 0             	CLRF	WREG
000378   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
00037a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00037c   ffe5
00037e   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
000380   ffe9
000382   c005     movff	0x5, 0xff3         	MOVFF	r0x05, PRODL
000384   fff3
000386   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000388   ecbc     call	0xf78, 0            	CALL	__gptrput1
00038a   f007
00038c   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
00038e   f008
000390   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000392   f007
000394   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000396   f006
000398   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00039a   f005
00039c   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00039e   f004
0003a0   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0003a2   f003
0003a4   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0003a6   f002
0003a8   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0003aa   f001
0003ac   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0003ae   f000
0003b0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0003b2   ffd9
0003b4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_serial__fifo_pop	code
                                           _fifo_pop:
                                           ;	.line	42; ../src/serial.c	static unsigned char fifo_pop(struct fifo* f)
0003b6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0003b8   ffe5
0003ba   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0003bc   ffd9
0003be   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0003c0   ffe5
0003c2   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0003c4   ffe5
0003c6   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0003c8   ffe5
0003ca   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0003cc   ffe5
0003ce   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0003d0   ffe5
0003d2   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0003d4   ffe5
0003d6   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0003d8   ffe5
0003da   0e02     movlw	0x2                	MOVLW	0x02
0003dc   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0003de   f000
0003e0   0e03     movlw	0x3                	MOVLW	0x03
0003e2   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0003e4   f001
0003e6   0e04     movlw	0x4                	MOVLW	0x04
0003e8   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0003ea   f002
                                           ;	.line	44; ../src/serial.c	return f->buffer[--f->size];
0003ec   5000     movf	0, 0, 0             	MOVF	r0x00, W
0003ee   0f01     addlw	0x1                	ADDLW	0x01
0003f0   6e03     movwf	0x3, 0             	MOVWF	r0x03
0003f2   0e00     movlw	0                  	MOVLW	0x00
0003f4   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0003f6   6e04     movwf	0x4, 0             	MOVWF	r0x04
0003f8   0e00     movlw	0                  	MOVLW	0x00
0003fa   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0003fc   6e05     movwf	0x5, 0             	MOVWF	r0x05
0003fe   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000400   ffe9
000402   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000404   fff3
000406   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000408   ec62     call	0xec4, 0            	CALL	__gptrget1
00040a   f007
00040c   0b0f     andlw	0xf                	ANDLW	0x0f
00040e   6e06     movwf	0x6, 0             	MOVWF	r0x06
000410   0606     decf	0x6, 0x1, 0         	DECF	r0x06, F
000412   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000414   0b0f     andlw	0xf                	ANDLW	0x0f
000416   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
000418   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00041a   ffe9
00041c   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00041e   fff3
000420   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000422   ec62     call	0xec4, 0            	CALL	__gptrget1
000424   f007
000426   0bf0     andlw	0xf0               	ANDLW	0xf0
000428   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
00042a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00042c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00042e   ffe9
000430   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000432   fff3
000434   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000436   ecbc     call	0xf78, 0            	CALL	__gptrput1
000438   f007
00043a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00043c   ffe9
00043e   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000440   fff3
000442   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000444   ec62     call	0xec4, 0            	CALL	__gptrget1
000446   f007
000448   0b0f     andlw	0xf                	ANDLW	0x0f
00044a   6e00     movwf	0, 0               	MOVWF	r0x00
00044c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00044e   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
000450   6ae8     clrf	0xe8, 0             	CLRF	WREG
000452   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000454   6ae8     clrf	0xe8, 0             	CLRF	WREG
000456   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
000458   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
00045a   ffe9
00045c   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
00045e   fff3
000460   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000462   ec62     call	0xec4, 0            	CALL	__gptrget1
000464   f007
000466   6e03     movwf	0x3, 0             	MOVWF	r0x03
000468   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00046a   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00046c   f006
00046e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000470   f005
000472   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000474   f004
000476   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000478   f003
00047a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00047c   f002
00047e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000480   f001
000482   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000484   f000
000486   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000488   ffd9
00048a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_serial__fifo_init	code
                                           _fifo_init:
                                           ;	.line	34; ../src/serial.c	static void fifo_init(struct fifo* f)
000624   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000626   ffe5
000628   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00062a   ffd9
00062c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00062e   ffe5
000630   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000632   ffe5
000634   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000636   ffe5
000638   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00063a   ffe5
00063c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00063e   ffe5
000640   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000642   ffe5
000644   0e02     movlw	0x2                	MOVLW	0x02
000646   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000648   f000
00064a   0e03     movlw	0x3                	MOVLW	0x03
00064c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00064e   f001
000650   0e04     movlw	0x4                	MOVLW	0x04
000652   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
000654   f002
                                           ;	.line	36; ../src/serial.c	f->size = 0;
000656   c000     movff	0, 0x3             	MOVFF	r0x00, r0x03
000658   f003
00065a   c001     movff	0x1, 0x4           	MOVFF	r0x01, r0x04
00065c   f004
00065e   c002     movff	0x2, 0x5           	MOVFF	r0x02, r0x05
000660   f005
000662   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
000664   ffe9
000666   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
000668   fff3
00066a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00066c   ec62     call	0xec4, 0            	CALL	__gptrget1
00066e   f007
000670   0bf0     andlw	0xf0               	ANDLW	0xf0
000672   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000674   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
000676   ffe9
000678   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
00067a   fff3
00067c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00067e   ecbc     call	0xf78, 0            	CALL	__gptrput1
000680   f007
                                           ;	.line	37; ../src/serial.c	f->error = 0;
000682   c000     movff	0, 0x3             	MOVFF	r0x00, r0x03
000684   f003
000686   c001     movff	0x1, 0x4           	MOVFF	r0x01, r0x04
000688   f004
00068a   c002     movff	0x2, 0x5           	MOVFF	r0x02, r0x05
00068c   f005
00068e   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
000690   ffe9
000692   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
000694   fff3
000696   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000698   ec62     call	0xec4, 0            	CALL	__gptrget1
00069a   f007
00069c   9ce8     bcf	0xe8, 0x6, 0         	BCF	WREG, 6
00069e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0006a0   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0006a2   ffe9
0006a4   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0006a6   fff3
0006a8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0006aa   ecbc     call	0xf78, 0            	CALL	__gptrput1
0006ac   f007
                                           ;	.line	38; ../src/serial.c	f->overflow = 0;
0006ae   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0006b0   ffe9
0006b2   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0006b4   fff3
0006b6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0006b8   ec62     call	0xec4, 0            	CALL	__gptrget1
0006ba   f007
0006bc   9ee8     bcf	0xe8, 0x7, 0         	BCF	WREG, 7
0006be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0006c0   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0006c2   ffe9
0006c4   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0006c6   fff3
0006c8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0006ca   ecbc     call	0xf78, 0            	CALL	__gptrput1
0006cc   f007
0006ce   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0006d0   f005
0006d2   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0006d4   f004
0006d6   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0006d8   f003
0006da   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0006dc   f002
0006de   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0006e0   f001
0006e2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0006e4   f000
0006e6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0006e8   ffd9
0006ea   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 2204 (0x089c) bytes ( 1.68%)
                                           ;           	 1102 (0x044e) words
                                           ; udata size:	    9 (0x0009) bytes ( 0.50%)
                                           ; access size:	   10 (0x000a) bytes
                                           
                                           
                                           	end
